/**
 * @fileoverview gRPC-Web generated client stub for GroupCon
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.25.0-rc2
// source: GroupCon.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as GroupCon_pb from './GroupCon_pb';


export class GroupConSvcClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetEganowGroupCountryList = new grpcWeb.MethodDescriptor(
    '/GroupCon.GroupConSvc/GetEganowGroupCountryList',
    grpcWeb.MethodType.UNARY,
    GroupCon_pb.EmptyGroupMessage,
    GroupCon_pb.GroupCountryListMessage,
    (request: GroupCon_pb.EmptyGroupMessage) => {
      return request.serializeBinary();
    },
    GroupCon_pb.GroupCountryListMessage.deserializeBinary
  );

  getEganowGroupCountryList(
    request: GroupCon_pb.EmptyGroupMessage,
    metadata: grpcWeb.Metadata | null): Promise<GroupCon_pb.GroupCountryListMessage>;

  getEganowGroupCountryList(
    request: GroupCon_pb.EmptyGroupMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: GroupCon_pb.GroupCountryListMessage) => void): grpcWeb.ClientReadableStream<GroupCon_pb.GroupCountryListMessage>;

  getEganowGroupCountryList(
    request: GroupCon_pb.EmptyGroupMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: GroupCon_pb.GroupCountryListMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/GroupCon.GroupConSvc/GetEganowGroupCountryList',
        request,
        metadata || {},
        this.methodDescriptorGetEganowGroupCountryList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/GroupCon.GroupConSvc/GetEganowGroupCountryList',
    request,
    metadata || {},
    this.methodDescriptorGetEganowGroupCountryList);
  }

  methodDescriptorGetGroupCategoryList = new grpcWeb.MethodDescriptor(
    '/GroupCon.GroupConSvc/GetGroupCategoryList',
    grpcWeb.MethodType.UNARY,
    GroupCon_pb.GroupCountryCodeRequestMessage,
    GroupCon_pb.GroupCategoryListMessage,
    (request: GroupCon_pb.GroupCountryCodeRequestMessage) => {
      return request.serializeBinary();
    },
    GroupCon_pb.GroupCategoryListMessage.deserializeBinary
  );

  getGroupCategoryList(
    request: GroupCon_pb.GroupCountryCodeRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<GroupCon_pb.GroupCategoryListMessage>;

  getGroupCategoryList(
    request: GroupCon_pb.GroupCountryCodeRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: GroupCon_pb.GroupCategoryListMessage) => void): grpcWeb.ClientReadableStream<GroupCon_pb.GroupCategoryListMessage>;

  getGroupCategoryList(
    request: GroupCon_pb.GroupCountryCodeRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: GroupCon_pb.GroupCategoryListMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/GroupCon.GroupConSvc/GetGroupCategoryList',
        request,
        metadata || {},
        this.methodDescriptorGetGroupCategoryList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/GroupCon.GroupConSvc/GetGroupCategoryList',
    request,
    metadata || {},
    this.methodDescriptorGetGroupCategoryList);
  }

  methodDescriptorGetProjectTemplateList = new grpcWeb.MethodDescriptor(
    '/GroupCon.GroupConSvc/GetProjectTemplateList',
    grpcWeb.MethodType.UNARY,
    GroupCon_pb.GroupCountryCodeRequestMessage,
    GroupCon_pb.ProjectTemplateListMessage,
    (request: GroupCon_pb.GroupCountryCodeRequestMessage) => {
      return request.serializeBinary();
    },
    GroupCon_pb.ProjectTemplateListMessage.deserializeBinary
  );

  getProjectTemplateList(
    request: GroupCon_pb.GroupCountryCodeRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<GroupCon_pb.ProjectTemplateListMessage>;

  getProjectTemplateList(
    request: GroupCon_pb.GroupCountryCodeRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: GroupCon_pb.ProjectTemplateListMessage) => void): grpcWeb.ClientReadableStream<GroupCon_pb.ProjectTemplateListMessage>;

  getProjectTemplateList(
    request: GroupCon_pb.GroupCountryCodeRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: GroupCon_pb.ProjectTemplateListMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/GroupCon.GroupConSvc/GetProjectTemplateList',
        request,
        metadata || {},
        this.methodDescriptorGetProjectTemplateList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/GroupCon.GroupConSvc/GetProjectTemplateList',
    request,
    metadata || {},
    this.methodDescriptorGetProjectTemplateList);
  }

  methodDescriptorCreateNewGroup = new grpcWeb.MethodDescriptor(
    '/GroupCon.GroupConSvc/CreateNewGroup',
    grpcWeb.MethodType.UNARY,
    GroupCon_pb.NewGroupRequestMessage,
    GroupCon_pb.SuccessGroupMessage,
    (request: GroupCon_pb.NewGroupRequestMessage) => {
      return request.serializeBinary();
    },
    GroupCon_pb.SuccessGroupMessage.deserializeBinary
  );

  createNewGroup(
    request: GroupCon_pb.NewGroupRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<GroupCon_pb.SuccessGroupMessage>;

  createNewGroup(
    request: GroupCon_pb.NewGroupRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: GroupCon_pb.SuccessGroupMessage) => void): grpcWeb.ClientReadableStream<GroupCon_pb.SuccessGroupMessage>;

  createNewGroup(
    request: GroupCon_pb.NewGroupRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: GroupCon_pb.SuccessGroupMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/GroupCon.GroupConSvc/CreateNewGroup',
        request,
        metadata || {},
        this.methodDescriptorCreateNewGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/GroupCon.GroupConSvc/CreateNewGroup',
    request,
    metadata || {},
    this.methodDescriptorCreateNewGroup);
  }

  methodDescriptorSendAnInvite = new grpcWeb.MethodDescriptor(
    '/GroupCon.GroupConSvc/SendAnInvite',
    grpcWeb.MethodType.UNARY,
    GroupCon_pb.InviteRequestMessage,
    GroupCon_pb.SuccessGroupMessage,
    (request: GroupCon_pb.InviteRequestMessage) => {
      return request.serializeBinary();
    },
    GroupCon_pb.SuccessGroupMessage.deserializeBinary
  );

  sendAnInvite(
    request: GroupCon_pb.InviteRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<GroupCon_pb.SuccessGroupMessage>;

  sendAnInvite(
    request: GroupCon_pb.InviteRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: GroupCon_pb.SuccessGroupMessage) => void): grpcWeb.ClientReadableStream<GroupCon_pb.SuccessGroupMessage>;

  sendAnInvite(
    request: GroupCon_pb.InviteRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: GroupCon_pb.SuccessGroupMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/GroupCon.GroupConSvc/SendAnInvite',
        request,
        metadata || {},
        this.methodDescriptorSendAnInvite,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/GroupCon.GroupConSvc/SendAnInvite',
    request,
    metadata || {},
    this.methodDescriptorSendAnInvite);
  }

  methodDescriptorGetInviteReceived = new grpcWeb.MethodDescriptor(
    '/GroupCon.GroupConSvc/GetInviteReceived',
    grpcWeb.MethodType.SERVER_STREAMING,
    GroupCon_pb.EmptyGroupMessage,
    GroupCon_pb.InviteListResponseMessage,
    (request: GroupCon_pb.EmptyGroupMessage) => {
      return request.serializeBinary();
    },
    GroupCon_pb.InviteListResponseMessage.deserializeBinary
  );

  getInviteReceived(
    request: GroupCon_pb.EmptyGroupMessage,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<GroupCon_pb.InviteListResponseMessage> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/GroupCon.GroupConSvc/GetInviteReceived',
      request,
      metadata || {},
      this.methodDescriptorGetInviteReceived);
  }

  methodDescriptorAcceptInvite = new grpcWeb.MethodDescriptor(
    '/GroupCon.GroupConSvc/AcceptInvite',
    grpcWeb.MethodType.UNARY,
    GroupCon_pb.AcceptInviteRequestMessage,
    GroupCon_pb.SuccessGroupMessage,
    (request: GroupCon_pb.AcceptInviteRequestMessage) => {
      return request.serializeBinary();
    },
    GroupCon_pb.SuccessGroupMessage.deserializeBinary
  );

  acceptInvite(
    request: GroupCon_pb.AcceptInviteRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<GroupCon_pb.SuccessGroupMessage>;

  acceptInvite(
    request: GroupCon_pb.AcceptInviteRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: GroupCon_pb.SuccessGroupMessage) => void): grpcWeb.ClientReadableStream<GroupCon_pb.SuccessGroupMessage>;

  acceptInvite(
    request: GroupCon_pb.AcceptInviteRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: GroupCon_pb.SuccessGroupMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/GroupCon.GroupConSvc/AcceptInvite',
        request,
        metadata || {},
        this.methodDescriptorAcceptInvite,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/GroupCon.GroupConSvc/AcceptInvite',
    request,
    metadata || {},
    this.methodDescriptorAcceptInvite);
  }

  methodDescriptorRejectInvite = new grpcWeb.MethodDescriptor(
    '/GroupCon.GroupConSvc/RejectInvite',
    grpcWeb.MethodType.UNARY,
    GroupCon_pb.RejectInviteRequestMessage,
    GroupCon_pb.SuccessGroupMessage,
    (request: GroupCon_pb.RejectInviteRequestMessage) => {
      return request.serializeBinary();
    },
    GroupCon_pb.SuccessGroupMessage.deserializeBinary
  );

  rejectInvite(
    request: GroupCon_pb.RejectInviteRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<GroupCon_pb.SuccessGroupMessage>;

  rejectInvite(
    request: GroupCon_pb.RejectInviteRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: GroupCon_pb.SuccessGroupMessage) => void): grpcWeb.ClientReadableStream<GroupCon_pb.SuccessGroupMessage>;

  rejectInvite(
    request: GroupCon_pb.RejectInviteRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: GroupCon_pb.SuccessGroupMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/GroupCon.GroupConSvc/RejectInvite',
        request,
        metadata || {},
        this.methodDescriptorRejectInvite,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/GroupCon.GroupConSvc/RejectInvite',
    request,
    metadata || {},
    this.methodDescriptorRejectInvite);
  }

  methodDescriptorGetAllActiveGroupsForACustomerInAllCountriesStream = new grpcWeb.MethodDescriptor(
    '/GroupCon.GroupConSvc/GetAllActiveGroupsForACustomerInAllCountriesStream',
    grpcWeb.MethodType.SERVER_STREAMING,
    GroupCon_pb.LanguageGroupRequestMessage,
    GroupCon_pb.CustomerGroupListResponseMessage,
    (request: GroupCon_pb.LanguageGroupRequestMessage) => {
      return request.serializeBinary();
    },
    GroupCon_pb.CustomerGroupListResponseMessage.deserializeBinary
  );

  getAllActiveGroupsForACustomerInAllCountriesStream(
    request: GroupCon_pb.LanguageGroupRequestMessage,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<GroupCon_pb.CustomerGroupListResponseMessage> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/GroupCon.GroupConSvc/GetAllActiveGroupsForACustomerInAllCountriesStream',
      request,
      metadata || {},
      this.methodDescriptorGetAllActiveGroupsForACustomerInAllCountriesStream);
  }

  methodDescriptorGetAllActiveProjectsForASelectedGroupInAllCountriesStream = new grpcWeb.MethodDescriptor(
    '/GroupCon.GroupConSvc/GetAllActiveProjectsForASelectedGroupInAllCountriesStream',
    grpcWeb.MethodType.SERVER_STREAMING,
    GroupCon_pb.ProjectOrGroupMembersRequestMessage,
    GroupCon_pb.ProjectListResponseMessage,
    (request: GroupCon_pb.ProjectOrGroupMembersRequestMessage) => {
      return request.serializeBinary();
    },
    GroupCon_pb.ProjectListResponseMessage.deserializeBinary
  );

  getAllActiveProjectsForASelectedGroupInAllCountriesStream(
    request: GroupCon_pb.ProjectOrGroupMembersRequestMessage,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<GroupCon_pb.ProjectListResponseMessage> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/GroupCon.GroupConSvc/GetAllActiveProjectsForASelectedGroupInAllCountriesStream',
      request,
      metadata || {},
      this.methodDescriptorGetAllActiveProjectsForASelectedGroupInAllCountriesStream);
  }

  methodDescriptorGetGroupMembersStream = new grpcWeb.MethodDescriptor(
    '/GroupCon.GroupConSvc/GetGroupMembersStream',
    grpcWeb.MethodType.SERVER_STREAMING,
    GroupCon_pb.ProjectOrGroupMembersRequestMessage,
    GroupCon_pb.GroupMembersListResponseMessage,
    (request: GroupCon_pb.ProjectOrGroupMembersRequestMessage) => {
      return request.serializeBinary();
    },
    GroupCon_pb.GroupMembersListResponseMessage.deserializeBinary
  );

  getGroupMembersStream(
    request: GroupCon_pb.ProjectOrGroupMembersRequestMessage,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<GroupCon_pb.GroupMembersListResponseMessage> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/GroupCon.GroupConSvc/GetGroupMembersStream',
      request,
      metadata || {},
      this.methodDescriptorGetGroupMembersStream);
  }

}

