/**
 * @fileoverview gRPC-Web generated client stub for MerchantMoneyTransferForBusinessPortal
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.25.0-rc2
// source: MerchantMoneyTransferForBusinessPortal.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as MerchantMoneyTransferForBusinessPortal_pb from './MerchantMoneyTransferForBusinessPortal_pb';


export class MerchantMoneyTransferForBusinessPortalSvcClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorPostCollectionMerchantTransactionThroughPaymentLinkInitialData = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransactionThroughPaymentLinkInitialData',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkInitailTransDataRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkInitailTransDataResponseMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkInitailTransDataRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkInitailTransDataResponseMessage.deserializeBinary
  );

  postCollectionMerchantTransactionThroughPaymentLinkInitialData(
    request: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkInitailTransDataRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkInitailTransDataResponseMessage>;

  postCollectionMerchantTransactionThroughPaymentLinkInitialData(
    request: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkInitailTransDataRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkInitailTransDataResponseMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkInitailTransDataResponseMessage>;

  postCollectionMerchantTransactionThroughPaymentLinkInitialData(
    request: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkInitailTransDataRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkInitailTransDataResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransactionThroughPaymentLinkInitialData',
        request,
        metadata || {},
        this.methodDescriptorPostCollectionMerchantTransactionThroughPaymentLinkInitialData,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransactionThroughPaymentLinkInitialData',
    request,
    metadata || {},
    this.methodDescriptorPostCollectionMerchantTransactionThroughPaymentLinkInitialData);
  }

  methodDescriptorPostCollectionMerchantTransactionThroughPaymentLink = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransactionThroughPaymentLink',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkTransRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkTransResponseMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkTransRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkTransResponseMessage.deserializeBinary
  );

  postCollectionMerchantTransactionThroughPaymentLink(
    request: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkTransRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkTransResponseMessage>;

  postCollectionMerchantTransactionThroughPaymentLink(
    request: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkTransResponseMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkTransResponseMessage>;

  postCollectionMerchantTransactionThroughPaymentLink(
    request: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentByLinkTransResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransactionThroughPaymentLink',
        request,
        metadata || {},
        this.methodDescriptorPostCollectionMerchantTransactionThroughPaymentLink,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransactionThroughPaymentLink',
    request,
    metadata || {},
    this.methodDescriptorPostCollectionMerchantTransactionThroughPaymentLink);
  }

  methodDescriptorPostCollectionMerchantTransaction = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransaction',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.BillPaymentTransRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans,
    (request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentTransRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans.deserializeBinary
  );

  postCollectionMerchantTransaction(
    request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentTransRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans>;

  postCollectionMerchantTransaction(
    request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans>;

  postCollectionMerchantTransaction(
    request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransaction',
        request,
        metadata || {},
        this.methodDescriptorPostCollectionMerchantTransaction,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostCollectionMerchantTransaction',
    request,
    metadata || {},
    this.methodDescriptorPostCollectionMerchantTransaction);
  }

  methodDescriptorPostPayoutMerchantTransaction = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostPayoutMerchantTransaction',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.BillPaymentTransRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans,
    (request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentTransRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans.deserializeBinary
  );

  postPayoutMerchantTransaction(
    request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentTransRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans>;

  postPayoutMerchantTransaction(
    request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans>;

  postPayoutMerchantTransaction(
    request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostPayoutMerchantTransaction',
        request,
        metadata || {},
        this.methodDescriptorPostPayoutMerchantTransaction,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/PostPayoutMerchantTransaction',
    request,
    metadata || {},
    this.methodDescriptorPostPayoutMerchantTransaction);
  }

  methodDescriptorGetTransactionStatus = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetTransactionStatus',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.TransStatusRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.TransStatusResponseMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.TransStatusRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.TransStatusResponseMessage.deserializeBinary
  );

  getTransactionStatus(
    request: MerchantMoneyTransferForBusinessPortal_pb.TransStatusRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.TransStatusResponseMessage>;

  getTransactionStatus(
    request: MerchantMoneyTransferForBusinessPortal_pb.TransStatusRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.TransStatusResponseMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.TransStatusResponseMessage>;

  getTransactionStatus(
    request: MerchantMoneyTransferForBusinessPortal_pb.TransStatusRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.TransStatusResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetTransactionStatus',
        request,
        metadata || {},
        this.methodDescriptorGetTransactionStatus,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetTransactionStatus',
    request,
    metadata || {},
    this.methodDescriptorGetTransactionStatus);
  }

  methodDescriptorGetMerchantServiceAccountBalance = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountBalance',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.BillPaymentCountryMessage,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceAccountBalListMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentCountryMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceAccountBalListMessage.deserializeBinary
  );

  getMerchantServiceAccountBalance(
    request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentCountryMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceAccountBalListMessage>;

  getMerchantServiceAccountBalance(
    request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentCountryMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceAccountBalListMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceAccountBalListMessage>;

  getMerchantServiceAccountBalance(
    request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentCountryMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceAccountBalListMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountBalance',
        request,
        metadata || {},
        this.methodDescriptorGetMerchantServiceAccountBalance,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountBalance',
    request,
    metadata || {},
    this.methodDescriptorGetMerchantServiceAccountBalance);
  }

  methodDescriptorGetMerchantServiceAccountBalanceByServiceId = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountBalanceByServiceId',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantServicesRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceAccountBalListMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.MerchantServicesRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceAccountBalListMessage.deserializeBinary
  );

  getMerchantServiceAccountBalanceByServiceId(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantServicesRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceAccountBalListMessage>;

  getMerchantServiceAccountBalanceByServiceId(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantServicesRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceAccountBalListMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceAccountBalListMessage>;

  getMerchantServiceAccountBalanceByServiceId(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantServicesRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceAccountBalListMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountBalanceByServiceId',
        request,
        metadata || {},
        this.methodDescriptorGetMerchantServiceAccountBalanceByServiceId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountBalanceByServiceId',
    request,
    metadata || {},
    this.methodDescriptorGetMerchantServiceAccountBalanceByServiceId);
  }

  methodDescriptorGetMerchantServiceAccountTrans = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountTrans',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransListMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransListMessage.deserializeBinary
  );

  getMerchantServiceAccountTrans(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransListMessage>;

  getMerchantServiceAccountTrans(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransListMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransListMessage>;

  getMerchantServiceAccountTrans(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransListMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountTrans',
        request,
        metadata || {},
        this.methodDescriptorGetMerchantServiceAccountTrans,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountTrans',
    request,
    metadata || {},
    this.methodDescriptorGetMerchantServiceAccountTrans);
  }

  methodDescriptorGetMerchantServiceAccountStatement = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountStatement',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceStatementListResponseMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceStatementListResponseMessage.deserializeBinary
  );

  getMerchantServiceAccountStatement(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceStatementListResponseMessage>;

  getMerchantServiceAccountStatement(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceStatementListResponseMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceStatementListResponseMessage>;

  getMerchantServiceAccountStatement(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceStatementListResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountStatement',
        request,
        metadata || {},
        this.methodDescriptorGetMerchantServiceAccountStatement,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountStatement',
    request,
    metadata || {},
    this.methodDescriptorGetMerchantServiceAccountStatement);
  }

  methodDescriptorGetMerchantServiceAccountToAccountTrans = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountToAccountTrans',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransListMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransListMessage.deserializeBinary
  );

  getMerchantServiceAccountToAccountTrans(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransListMessage>;

  getMerchantServiceAccountToAccountTrans(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransListMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransListMessage>;

  getMerchantServiceAccountToAccountTrans(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantServiceTransListMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountToAccountTrans',
        request,
        metadata || {},
        this.methodDescriptorGetMerchantServiceAccountToAccountTrans,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceAccountToAccountTrans',
    request,
    metadata || {},
    this.methodDescriptorGetMerchantServiceAccountToAccountTrans);
  }

  methodDescriptorMerchantServiceInternalFundTransfer = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundTransfer',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantInternalFundTransferInitRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans,
    (request: MerchantMoneyTransferForBusinessPortal_pb.MerchantInternalFundTransferInitRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans.deserializeBinary
  );

  merchantServiceInternalFundTransfer(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantInternalFundTransferInitRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans>;

  merchantServiceInternalFundTransfer(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantInternalFundTransferInitRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans>;

  merchantServiceInternalFundTransfer(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantInternalFundTransferInitRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundTransfer',
        request,
        metadata || {},
        this.methodDescriptorMerchantServiceInternalFundTransfer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundTransfer',
    request,
    metadata || {},
    this.methodDescriptorMerchantServiceInternalFundTransfer);
  }

  methodDescriptorGetMerchantServiceFundTransferPendingTransactions = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceFundTransferPendingTransactions',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferPendingRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferTransListResponseMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferPendingRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferTransListResponseMessage.deserializeBinary
  );

  getMerchantServiceFundTransferPendingTransactions(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferPendingRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferTransListResponseMessage>;

  getMerchantServiceFundTransferPendingTransactions(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferPendingRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferTransListResponseMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferTransListResponseMessage>;

  getMerchantServiceFundTransferPendingTransactions(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferPendingRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferTransListResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceFundTransferPendingTransactions',
        request,
        metadata || {},
        this.methodDescriptorGetMerchantServiceFundTransferPendingTransactions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServiceFundTransferPendingTransactions',
    request,
    metadata || {},
    this.methodDescriptorGetMerchantServiceFundTransferPendingTransactions);
  }

  methodDescriptorMerchantServiceInternalFundTransferApproval = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundTransferApproval',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferApprovalRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans,
    (request: MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferApprovalRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans.deserializeBinary
  );

  merchantServiceInternalFundTransferApproval(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferApprovalRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans>;

  merchantServiceInternalFundTransferApproval(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferApprovalRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans>;

  merchantServiceInternalFundTransferApproval(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferApprovalRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundTransferApproval',
        request,
        metadata || {},
        this.methodDescriptorMerchantServiceInternalFundTransferApproval,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundTransferApproval',
    request,
    metadata || {},
    this.methodDescriptorMerchantServiceInternalFundTransferApproval);
  }

  methodDescriptorMerchantTranRetryOnBusinessPortal = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantTranRetryOnBusinessPortal',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantTransRetryRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans,
    (request: MerchantMoneyTransferForBusinessPortal_pb.MerchantTransRetryRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans.deserializeBinary
  );

  merchantTranRetryOnBusinessPortal(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantTransRetryRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans>;

  merchantTranRetryOnBusinessPortal(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantTransRetryRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans>;

  merchantTranRetryOnBusinessPortal(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantTransRetryRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantTranRetryOnBusinessPortal',
        request,
        metadata || {},
        this.methodDescriptorMerchantTranRetryOnBusinessPortal,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantTranRetryOnBusinessPortal',
    request,
    metadata || {},
    this.methodDescriptorMerchantTranRetryOnBusinessPortal);
  }

  methodDescriptorMerchantServiceInternalFundHistory = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundHistory',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferHistoryRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferTransHistoryListResponseMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferHistoryRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferTransHistoryListResponseMessage.deserializeBinary
  );

  merchantServiceInternalFundHistory(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferHistoryRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferTransHistoryListResponseMessage>;

  merchantServiceInternalFundHistory(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferHistoryRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferTransHistoryListResponseMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferTransHistoryListResponseMessage>;

  merchantServiceInternalFundHistory(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferHistoryRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantFundTransferTransHistoryListResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundHistory',
        request,
        metadata || {},
        this.methodDescriptorMerchantServiceInternalFundHistory,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/MerchantServiceInternalFundHistory',
    request,
    metadata || {},
    this.methodDescriptorMerchantServiceInternalFundHistory);
  }

  methodDescriptorGetMerchantServicesByCustomerGuidList = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServicesByCustomerGuidList',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.BillPaymentCountryMessage,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantServicesListResponseMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentCountryMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.MerchantServicesListResponseMessage.deserializeBinary
  );

  getMerchantServicesByCustomerGuidList(
    request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentCountryMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.MerchantServicesListResponseMessage>;

  getMerchantServicesByCustomerGuidList(
    request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentCountryMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantServicesListResponseMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.MerchantServicesListResponseMessage>;

  getMerchantServicesByCustomerGuidList(
    request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentCountryMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantServicesListResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServicesByCustomerGuidList',
        request,
        metadata || {},
        this.methodDescriptorGetMerchantServicesByCustomerGuidList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantServicesByCustomerGuidList',
    request,
    metadata || {},
    this.methodDescriptorGetMerchantServicesByCustomerGuidList);
  }

  methodDescriptorGetMerchantPaymentLinkInitialTransData = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantPaymentLinkInitialTransData',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentInitialTransDataRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentInitialTransDataResponseMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentInitialTransDataRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentInitialTransDataResponseMessage.deserializeBinary
  );

  getMerchantPaymentLinkInitialTransData(
    request: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentInitialTransDataRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentInitialTransDataResponseMessage>;

  getMerchantPaymentLinkInitialTransData(
    request: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentInitialTransDataRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentInitialTransDataResponseMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentInitialTransDataResponseMessage>;

  getMerchantPaymentLinkInitialTransData(
    request: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentInitialTransDataRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MechantPaymentInitialTransDataResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantPaymentLinkInitialTransData',
        request,
        metadata || {},
        this.methodDescriptorGetMerchantPaymentLinkInitialTransData,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantPaymentLinkInitialTransData',
    request,
    metadata || {},
    this.methodDescriptorGetMerchantPaymentLinkInitialTransData);
  }

  methodDescriptorGetCustomerPaymentSourceAccountListForMerchantTransaction = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetCustomerPaymentSourceAccountListForMerchantTransaction',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantCustomerPaymentSourceAccountsRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantCustomerExistingSourceAccountsListMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.MerchantCustomerPaymentSourceAccountsRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.MerchantCustomerExistingSourceAccountsListMessage.deserializeBinary
  );

  getCustomerPaymentSourceAccountListForMerchantTransaction(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantCustomerPaymentSourceAccountsRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.MerchantCustomerExistingSourceAccountsListMessage>;

  getCustomerPaymentSourceAccountListForMerchantTransaction(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantCustomerPaymentSourceAccountsRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantCustomerExistingSourceAccountsListMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.MerchantCustomerExistingSourceAccountsListMessage>;

  getCustomerPaymentSourceAccountListForMerchantTransaction(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantCustomerPaymentSourceAccountsRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantCustomerExistingSourceAccountsListMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetCustomerPaymentSourceAccountListForMerchantTransaction',
        request,
        metadata || {},
        this.methodDescriptorGetCustomerPaymentSourceAccountListForMerchantTransaction,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetCustomerPaymentSourceAccountListForMerchantTransaction',
    request,
    metadata || {},
    this.methodDescriptorGetCustomerPaymentSourceAccountListForMerchantTransaction);
  }

  methodDescriptorGetPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.PayLinkCountryRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.PayLinkPaymentAcctTypesAndServicesListResponseMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.PayLinkCountryRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.PayLinkPaymentAcctTypesAndServicesListResponseMessage.deserializeBinary
  );

  getPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans(
    request: MerchantMoneyTransferForBusinessPortal_pb.PayLinkCountryRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.PayLinkPaymentAcctTypesAndServicesListResponseMessage>;

  getPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans(
    request: MerchantMoneyTransferForBusinessPortal_pb.PayLinkCountryRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.PayLinkPaymentAcctTypesAndServicesListResponseMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.PayLinkPaymentAcctTypesAndServicesListResponseMessage>;

  getPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans(
    request: MerchantMoneyTransferForBusinessPortal_pb.PayLinkCountryRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.PayLinkPaymentAcctTypesAndServicesListResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans',
        request,
        metadata || {},
        this.methodDescriptorGetPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans',
    request,
    metadata || {},
    this.methodDescriptorGetPaymentTypeForSourceAccountsForSelectedCountryForPayLinkTrans);
  }

  methodDescriptorGetMerchantCustomerKycForPaylinkTrans = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantCustomerKycForPaylinkTrans',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.PaylinkCustomerAccountNoRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.PaylinkCustomerAccountNoResponseMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.PaylinkCustomerAccountNoRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.PaylinkCustomerAccountNoResponseMessage.deserializeBinary
  );

  getMerchantCustomerKycForPaylinkTrans(
    request: MerchantMoneyTransferForBusinessPortal_pb.PaylinkCustomerAccountNoRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.PaylinkCustomerAccountNoResponseMessage>;

  getMerchantCustomerKycForPaylinkTrans(
    request: MerchantMoneyTransferForBusinessPortal_pb.PaylinkCustomerAccountNoRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.PaylinkCustomerAccountNoResponseMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.PaylinkCustomerAccountNoResponseMessage>;

  getMerchantCustomerKycForPaylinkTrans(
    request: MerchantMoneyTransferForBusinessPortal_pb.PaylinkCustomerAccountNoRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.PaylinkCustomerAccountNoResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantCustomerKycForPaylinkTrans',
        request,
        metadata || {},
        this.methodDescriptorGetMerchantCustomerKycForPaylinkTrans,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetMerchantCustomerKycForPaylinkTrans',
    request,
    metadata || {},
    this.methodDescriptorGetMerchantCustomerKycForPaylinkTrans);
  }

  methodDescriptorCreateMerchantBizCollecRequest = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/CreateMerchantBizCollecRequest',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantBizCollecRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans,
    (request: MerchantMoneyTransferForBusinessPortal_pb.MerchantBizCollecRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans.deserializeBinary
  );

  createMerchantBizCollecRequest(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantBizCollecRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans>;

  createMerchantBizCollecRequest(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantBizCollecRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans>;

  createMerchantBizCollecRequest(
    request: MerchantMoneyTransferForBusinessPortal_pb.MerchantBizCollecRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/CreateMerchantBizCollecRequest',
        request,
        metadata || {},
        this.methodDescriptorCreateMerchantBizCollecRequest,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/CreateMerchantBizCollecRequest',
    request,
    metadata || {},
    this.methodDescriptorCreateMerchantBizCollecRequest);
  }

  methodDescriptorGetBizCollectrequestForMerchant = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetBizCollectrequestForMerchant',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.BillPaymentEmptyMessage,
    MerchantMoneyTransferForBusinessPortal_pb.MerchantBizCollecListResponseMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentEmptyMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.MerchantBizCollecListResponseMessage.deserializeBinary
  );

  getBizCollectrequestForMerchant(
    request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentEmptyMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.MerchantBizCollecListResponseMessage>;

  getBizCollectrequestForMerchant(
    request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentEmptyMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantBizCollecListResponseMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.MerchantBizCollecListResponseMessage>;

  getBizCollectrequestForMerchant(
    request: MerchantMoneyTransferForBusinessPortal_pb.BillPaymentEmptyMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.MerchantBizCollecListResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetBizCollectrequestForMerchant',
        request,
        metadata || {},
        this.methodDescriptorGetBizCollectrequestForMerchant,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetBizCollectrequestForMerchant',
    request,
    metadata || {},
    this.methodDescriptorGetBizCollectrequestForMerchant);
  }

  methodDescriptorGetPaymentLinkListForMerchant = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetPaymentLinkListForMerchant',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.PaymentLinkListRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.PaymentLinksForAMerchantRspenseDataListMessage,
    (request: MerchantMoneyTransferForBusinessPortal_pb.PaymentLinkListRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.PaymentLinksForAMerchantRspenseDataListMessage.deserializeBinary
  );

  getPaymentLinkListForMerchant(
    request: MerchantMoneyTransferForBusinessPortal_pb.PaymentLinkListRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.PaymentLinksForAMerchantRspenseDataListMessage>;

  getPaymentLinkListForMerchant(
    request: MerchantMoneyTransferForBusinessPortal_pb.PaymentLinkListRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.PaymentLinksForAMerchantRspenseDataListMessage) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.PaymentLinksForAMerchantRspenseDataListMessage>;

  getPaymentLinkListForMerchant(
    request: MerchantMoneyTransferForBusinessPortal_pb.PaymentLinkListRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.PaymentLinksForAMerchantRspenseDataListMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetPaymentLinkListForMerchant',
        request,
        metadata || {},
        this.methodDescriptorGetPaymentLinkListForMerchant,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/GetPaymentLinkListForMerchant',
    request,
    metadata || {},
    this.methodDescriptorGetPaymentLinkListForMerchant);
  }

  methodDescriptorDeactivatePaymentLink = new grpcWeb.MethodDescriptor(
    '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/DeactivatePaymentLink',
    grpcWeb.MethodType.UNARY,
    MerchantMoneyTransferForBusinessPortal_pb.PaymentLinkRefNoDataRequestMessage,
    MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans,
    (request: MerchantMoneyTransferForBusinessPortal_pb.PaymentLinkRefNoDataRequestMessage) => {
      return request.serializeBinary();
    },
    MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans.deserializeBinary
  );

  deactivatePaymentLink(
    request: MerchantMoneyTransferForBusinessPortal_pb.PaymentLinkRefNoDataRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans>;

  deactivatePaymentLink(
    request: MerchantMoneyTransferForBusinessPortal_pb.PaymentLinkRefNoDataRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans) => void): grpcWeb.ClientReadableStream<MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans>;

  deactivatePaymentLink(
    request: MerchantMoneyTransferForBusinessPortal_pb.PaymentLinkRefNoDataRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: MerchantMoneyTransferForBusinessPortal_pb.SuccessMessageMerchantTrans) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/DeactivatePaymentLink',
        request,
        metadata || {},
        this.methodDescriptorDeactivatePaymentLink,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/MerchantMoneyTransferForBusinessPortal.MerchantMoneyTransferForBusinessPortalSvc/DeactivatePaymentLink',
    request,
    metadata || {},
    this.methodDescriptorDeactivatePaymentLink);
  }

}

