/**
 * @fileoverview gRPC-Web generated client stub for EganowMoneyTransfer
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.25.0-rc2
// source: EganowMoneyTransfer.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as EganowMoneyTransfer_pb from './EganowMoneyTransfer_pb';


export class EganowMoneyTransferSvcClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorPostMobileMoneyTransferTrans = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/PostMobileMoneyTransferTrans',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.MoneyTransferRequestMessage,
    EganowMoneyTransfer_pb.MoneyTransferSuccessMessage,
    (request: EganowMoneyTransfer_pb.MoneyTransferRequestMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.MoneyTransferSuccessMessage.deserializeBinary
  );

  postMobileMoneyTransferTrans(
    request: EganowMoneyTransfer_pb.MoneyTransferRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.MoneyTransferSuccessMessage>;

  postMobileMoneyTransferTrans(
    request: EganowMoneyTransfer_pb.MoneyTransferRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.MoneyTransferSuccessMessage) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.MoneyTransferSuccessMessage>;

  postMobileMoneyTransferTrans(
    request: EganowMoneyTransfer_pb.MoneyTransferRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.MoneyTransferSuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/PostMobileMoneyTransferTrans',
        request,
        metadata || {},
        this.methodDescriptorPostMobileMoneyTransferTrans,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/PostMobileMoneyTransferTrans',
    request,
    metadata || {},
    this.methodDescriptorPostMobileMoneyTransferTrans);
  }

  methodDescriptorGetCustomerExistingSourceAccountListForView = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerExistingSourceAccountListForView',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.CustomerExistingSourceAccountsRequestMessage,
    EganowMoneyTransfer_pb.CustomerExistingSourceAccountsListMessage,
    (request: EganowMoneyTransfer_pb.CustomerExistingSourceAccountsRequestMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.CustomerExistingSourceAccountsListMessage.deserializeBinary
  );

  getCustomerExistingSourceAccountListForView(
    request: EganowMoneyTransfer_pb.CustomerExistingSourceAccountsRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.CustomerExistingSourceAccountsListMessage>;

  getCustomerExistingSourceAccountListForView(
    request: EganowMoneyTransfer_pb.CustomerExistingSourceAccountsRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.CustomerExistingSourceAccountsListMessage) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.CustomerExistingSourceAccountsListMessage>;

  getCustomerExistingSourceAccountListForView(
    request: EganowMoneyTransfer_pb.CustomerExistingSourceAccountsRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.CustomerExistingSourceAccountsListMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerExistingSourceAccountListForView',
        request,
        metadata || {},
        this.methodDescriptorGetCustomerExistingSourceAccountListForView,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerExistingSourceAccountListForView',
    request,
    metadata || {},
    this.methodDescriptorGetCustomerExistingSourceAccountListForView);
  }

  methodDescriptorGetCustomerPaymentSourceAccountListForTransaction = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerPaymentSourceAccountListForTransaction',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.CustomerPaymentSourceAccountsRequestMessage,
    EganowMoneyTransfer_pb.CustomerExistingSourceAccountsListMessage,
    (request: EganowMoneyTransfer_pb.CustomerPaymentSourceAccountsRequestMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.CustomerExistingSourceAccountsListMessage.deserializeBinary
  );

  getCustomerPaymentSourceAccountListForTransaction(
    request: EganowMoneyTransfer_pb.CustomerPaymentSourceAccountsRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.CustomerExistingSourceAccountsListMessage>;

  getCustomerPaymentSourceAccountListForTransaction(
    request: EganowMoneyTransfer_pb.CustomerPaymentSourceAccountsRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.CustomerExistingSourceAccountsListMessage) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.CustomerExistingSourceAccountsListMessage>;

  getCustomerPaymentSourceAccountListForTransaction(
    request: EganowMoneyTransfer_pb.CustomerPaymentSourceAccountsRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.CustomerExistingSourceAccountsListMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerPaymentSourceAccountListForTransaction',
        request,
        metadata || {},
        this.methodDescriptorGetCustomerPaymentSourceAccountListForTransaction,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerPaymentSourceAccountListForTransaction',
    request,
    metadata || {},
    this.methodDescriptorGetCustomerPaymentSourceAccountListForTransaction);
  }

  methodDescriptorCalculateMoneyTransferCharges = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/CalculateMoneyTransferCharges',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.CalculateTransChargeRequestMessage,
    EganowMoneyTransfer_pb.CalculateTransChargeResponseMessage,
    (request: EganowMoneyTransfer_pb.CalculateTransChargeRequestMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.CalculateTransChargeResponseMessage.deserializeBinary
  );

  calculateMoneyTransferCharges(
    request: EganowMoneyTransfer_pb.CalculateTransChargeRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.CalculateTransChargeResponseMessage>;

  calculateMoneyTransferCharges(
    request: EganowMoneyTransfer_pb.CalculateTransChargeRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.CalculateTransChargeResponseMessage) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.CalculateTransChargeResponseMessage>;

  calculateMoneyTransferCharges(
    request: EganowMoneyTransfer_pb.CalculateTransChargeRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.CalculateTransChargeResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/CalculateMoneyTransferCharges',
        request,
        metadata || {},
        this.methodDescriptorCalculateMoneyTransferCharges,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/CalculateMoneyTransferCharges',
    request,
    metadata || {},
    this.methodDescriptorCalculateMoneyTransferCharges);
  }

  methodDescriptorGetCustomerBeficiaryListByPayPartnerId = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerBeficiaryListByPayPartnerId',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerRequestMessage,
    EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerResponseMessage,
    (request: EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerRequestMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerResponseMessage.deserializeBinary
  );

  getCustomerBeficiaryListByPayPartnerId(
    request: EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerResponseMessage>;

  getCustomerBeficiaryListByPayPartnerId(
    request: EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerResponseMessage) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerResponseMessage>;

  getCustomerBeficiaryListByPayPartnerId(
    request: EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerBeficiaryListByPayPartnerId',
        request,
        metadata || {},
        this.methodDescriptorGetCustomerBeficiaryListByPayPartnerId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerBeficiaryListByPayPartnerId',
    request,
    metadata || {},
    this.methodDescriptorGetCustomerBeficiaryListByPayPartnerId);
  }

  methodDescriptorGetCustomerBeficiaryListForSelectedProvider = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerBeficiaryListForSelectedProvider',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.BeneficiaryListByProviderRequestMessage,
    EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerResponseMessage,
    (request: EganowMoneyTransfer_pb.BeneficiaryListByProviderRequestMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerResponseMessage.deserializeBinary
  );

  getCustomerBeficiaryListForSelectedProvider(
    request: EganowMoneyTransfer_pb.BeneficiaryListByProviderRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerResponseMessage>;

  getCustomerBeficiaryListForSelectedProvider(
    request: EganowMoneyTransfer_pb.BeneficiaryListByProviderRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerResponseMessage) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerResponseMessage>;

  getCustomerBeficiaryListForSelectedProvider(
    request: EganowMoneyTransfer_pb.BeneficiaryListByProviderRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.BeneficiaryListByPayPartnerResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerBeficiaryListForSelectedProvider',
        request,
        metadata || {},
        this.methodDescriptorGetCustomerBeficiaryListForSelectedProvider,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerBeficiaryListForSelectedProvider',
    request,
    metadata || {},
    this.methodDescriptorGetCustomerBeficiaryListForSelectedProvider);
  }

  methodDescriptorAddCustomerMomoBankAndMerchantSourceAccount = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerMomoBankAndMerchantSourceAccount',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.CustomerSourceAcctRequestMessage,
    EganowMoneyTransfer_pb.MoneyTransferSuccessMessage,
    (request: EganowMoneyTransfer_pb.CustomerSourceAcctRequestMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.MoneyTransferSuccessMessage.deserializeBinary
  );

  addCustomerMomoBankAndMerchantSourceAccount(
    request: EganowMoneyTransfer_pb.CustomerSourceAcctRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.MoneyTransferSuccessMessage>;

  addCustomerMomoBankAndMerchantSourceAccount(
    request: EganowMoneyTransfer_pb.CustomerSourceAcctRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.MoneyTransferSuccessMessage) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.MoneyTransferSuccessMessage>;

  addCustomerMomoBankAndMerchantSourceAccount(
    request: EganowMoneyTransfer_pb.CustomerSourceAcctRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.MoneyTransferSuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerMomoBankAndMerchantSourceAccount',
        request,
        metadata || {},
        this.methodDescriptorAddCustomerMomoBankAndMerchantSourceAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerMomoBankAndMerchantSourceAccount',
    request,
    metadata || {},
    this.methodDescriptorAddCustomerMomoBankAndMerchantSourceAccount);
  }

  methodDescriptorAddCustomerCardSourceAccount = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerCardSourceAccount',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.CustomerSourceAcctCardRequestMessage,
    EganowMoneyTransfer_pb.CustomerSourceAcctCardResponseMessage,
    (request: EganowMoneyTransfer_pb.CustomerSourceAcctCardRequestMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.CustomerSourceAcctCardResponseMessage.deserializeBinary
  );

  addCustomerCardSourceAccount(
    request: EganowMoneyTransfer_pb.CustomerSourceAcctCardRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.CustomerSourceAcctCardResponseMessage>;

  addCustomerCardSourceAccount(
    request: EganowMoneyTransfer_pb.CustomerSourceAcctCardRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.CustomerSourceAcctCardResponseMessage) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.CustomerSourceAcctCardResponseMessage>;

  addCustomerCardSourceAccount(
    request: EganowMoneyTransfer_pb.CustomerSourceAcctCardRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.CustomerSourceAcctCardResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerCardSourceAccount',
        request,
        metadata || {},
        this.methodDescriptorAddCustomerCardSourceAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerCardSourceAccount',
    request,
    metadata || {},
    this.methodDescriptorAddCustomerCardSourceAccount);
  }

  methodDescriptorAddCustomerBeneficiaryAccount = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerBeneficiaryAccount',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.CustomerBeneficiaryAcctRequestMessage,
    EganowMoneyTransfer_pb.MoneyTransferSuccessMessage,
    (request: EganowMoneyTransfer_pb.CustomerBeneficiaryAcctRequestMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.MoneyTransferSuccessMessage.deserializeBinary
  );

  addCustomerBeneficiaryAccount(
    request: EganowMoneyTransfer_pb.CustomerBeneficiaryAcctRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.MoneyTransferSuccessMessage>;

  addCustomerBeneficiaryAccount(
    request: EganowMoneyTransfer_pb.CustomerBeneficiaryAcctRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.MoneyTransferSuccessMessage) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.MoneyTransferSuccessMessage>;

  addCustomerBeneficiaryAccount(
    request: EganowMoneyTransfer_pb.CustomerBeneficiaryAcctRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.MoneyTransferSuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerBeneficiaryAccount',
        request,
        metadata || {},
        this.methodDescriptorAddCustomerBeneficiaryAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/AddCustomerBeneficiaryAccount',
    request,
    metadata || {},
    this.methodDescriptorAddCustomerBeneficiaryAccount);
  }

  methodDescriptorIsCustomerPinValid = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/IsCustomerPinValid',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.VerifyCustomerPinMessage,
    EganowMoneyTransfer_pb.IsCustomerPinValidResponseMessage,
    (request: EganowMoneyTransfer_pb.VerifyCustomerPinMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.IsCustomerPinValidResponseMessage.deserializeBinary
  );

  isCustomerPinValid(
    request: EganowMoneyTransfer_pb.VerifyCustomerPinMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.IsCustomerPinValidResponseMessage>;

  isCustomerPinValid(
    request: EganowMoneyTransfer_pb.VerifyCustomerPinMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.IsCustomerPinValidResponseMessage) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.IsCustomerPinValidResponseMessage>;

  isCustomerPinValid(
    request: EganowMoneyTransfer_pb.VerifyCustomerPinMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.IsCustomerPinValidResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/IsCustomerPinValid',
        request,
        metadata || {},
        this.methodDescriptorIsCustomerPinValid,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/IsCustomerPinValid',
    request,
    metadata || {},
    this.methodDescriptorIsCustomerPinValid);
  }

  methodDescriptorChangeCustomerPin = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/ChangeCustomerPin',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.VerifyCustomerPinMessage,
    EganowMoneyTransfer_pb.MoneyTransferSuccessMessage,
    (request: EganowMoneyTransfer_pb.VerifyCustomerPinMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.MoneyTransferSuccessMessage.deserializeBinary
  );

  changeCustomerPin(
    request: EganowMoneyTransfer_pb.VerifyCustomerPinMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.MoneyTransferSuccessMessage>;

  changeCustomerPin(
    request: EganowMoneyTransfer_pb.VerifyCustomerPinMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.MoneyTransferSuccessMessage) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.MoneyTransferSuccessMessage>;

  changeCustomerPin(
    request: EganowMoneyTransfer_pb.VerifyCustomerPinMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.MoneyTransferSuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/ChangeCustomerPin',
        request,
        metadata || {},
        this.methodDescriptorChangeCustomerPin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/ChangeCustomerPin',
    request,
    metadata || {},
    this.methodDescriptorChangeCustomerPin);
  }

  methodDescriptorGetEganowCustomerBeneficiaryByMobileNo = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetEganowCustomerBeneficiaryByMobileNo',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.EganowBeneficiaryMobileNoRequestMessage,
    EganowMoneyTransfer_pb.EganowBeneficiaryResponseMessage,
    (request: EganowMoneyTransfer_pb.EganowBeneficiaryMobileNoRequestMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.EganowBeneficiaryResponseMessage.deserializeBinary
  );

  getEganowCustomerBeneficiaryByMobileNo(
    request: EganowMoneyTransfer_pb.EganowBeneficiaryMobileNoRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.EganowBeneficiaryResponseMessage>;

  getEganowCustomerBeneficiaryByMobileNo(
    request: EganowMoneyTransfer_pb.EganowBeneficiaryMobileNoRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.EganowBeneficiaryResponseMessage) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.EganowBeneficiaryResponseMessage>;

  getEganowCustomerBeneficiaryByMobileNo(
    request: EganowMoneyTransfer_pb.EganowBeneficiaryMobileNoRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.EganowBeneficiaryResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetEganowCustomerBeneficiaryByMobileNo',
        request,
        metadata || {},
        this.methodDescriptorGetEganowCustomerBeneficiaryByMobileNo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetEganowCustomerBeneficiaryByMobileNo',
    request,
    metadata || {},
    this.methodDescriptorGetEganowCustomerBeneficiaryByMobileNo);
  }

  methodDescriptorResetUserPin = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/ResetUserPin',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.CustomerRequestMessage,
    EganowMoneyTransfer_pb.MoneyTransferSuccessMessage,
    (request: EganowMoneyTransfer_pb.CustomerRequestMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.MoneyTransferSuccessMessage.deserializeBinary
  );

  resetUserPin(
    request: EganowMoneyTransfer_pb.CustomerRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.MoneyTransferSuccessMessage>;

  resetUserPin(
    request: EganowMoneyTransfer_pb.CustomerRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.MoneyTransferSuccessMessage) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.MoneyTransferSuccessMessage>;

  resetUserPin(
    request: EganowMoneyTransfer_pb.CustomerRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.MoneyTransferSuccessMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/ResetUserPin',
        request,
        metadata || {},
        this.methodDescriptorResetUserPin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/ResetUserPin',
    request,
    metadata || {},
    this.methodDescriptorResetUserPin);
  }

  methodDescriptorGetMerchantCustomerKyc = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetMerchantCustomerKyc',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.MerchantCustomerAccountNoRequestMessage,
    EganowMoneyTransfer_pb.MerchantCustomerAccountNoResponseMessage,
    (request: EganowMoneyTransfer_pb.MerchantCustomerAccountNoRequestMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.MerchantCustomerAccountNoResponseMessage.deserializeBinary
  );

  getMerchantCustomerKyc(
    request: EganowMoneyTransfer_pb.MerchantCustomerAccountNoRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.MerchantCustomerAccountNoResponseMessage>;

  getMerchantCustomerKyc(
    request: EganowMoneyTransfer_pb.MerchantCustomerAccountNoRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.MerchantCustomerAccountNoResponseMessage) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.MerchantCustomerAccountNoResponseMessage>;

  getMerchantCustomerKyc(
    request: EganowMoneyTransfer_pb.MerchantCustomerAccountNoRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.MerchantCustomerAccountNoResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetMerchantCustomerKyc',
        request,
        metadata || {},
        this.methodDescriptorGetMerchantCustomerKyc,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetMerchantCustomerKyc',
    request,
    metadata || {},
    this.methodDescriptorGetMerchantCustomerKyc);
  }

  methodDescriptorGetCustomerEganowBalances = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowBalances',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.MoneyTransferEmptyMessage,
    EganowMoneyTransfer_pb.CustomerEganowWalletBalanceListResponse,
    (request: EganowMoneyTransfer_pb.MoneyTransferEmptyMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.CustomerEganowWalletBalanceListResponse.deserializeBinary
  );

  getCustomerEganowBalances(
    request: EganowMoneyTransfer_pb.MoneyTransferEmptyMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.CustomerEganowWalletBalanceListResponse>;

  getCustomerEganowBalances(
    request: EganowMoneyTransfer_pb.MoneyTransferEmptyMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.CustomerEganowWalletBalanceListResponse) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.CustomerEganowWalletBalanceListResponse>;

  getCustomerEganowBalances(
    request: EganowMoneyTransfer_pb.MoneyTransferEmptyMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.CustomerEganowWalletBalanceListResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowBalances',
        request,
        metadata || {},
        this.methodDescriptorGetCustomerEganowBalances,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowBalances',
    request,
    metadata || {},
    this.methodDescriptorGetCustomerEganowBalances);
  }

  methodDescriptorGetCustomerEganowTransactions = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowTransactions',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.CustTransRequestMessage,
    EganowMoneyTransfer_pb.CustTransListResponseMessage,
    (request: EganowMoneyTransfer_pb.CustTransRequestMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.CustTransListResponseMessage.deserializeBinary
  );

  getCustomerEganowTransactions(
    request: EganowMoneyTransfer_pb.CustTransRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.CustTransListResponseMessage>;

  getCustomerEganowTransactions(
    request: EganowMoneyTransfer_pb.CustTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.CustTransListResponseMessage) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.CustTransListResponseMessage>;

  getCustomerEganowTransactions(
    request: EganowMoneyTransfer_pb.CustTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.CustTransListResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowTransactions',
        request,
        metadata || {},
        this.methodDescriptorGetCustomerEganowTransactions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowTransactions',
    request,
    metadata || {},
    this.methodDescriptorGetCustomerEganowTransactions);
  }

  methodDescriptorGetCustomerEganowStatement = new grpcWeb.MethodDescriptor(
    '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowStatement',
    grpcWeb.MethodType.UNARY,
    EganowMoneyTransfer_pb.CustTransRequestMessage,
    EganowMoneyTransfer_pb.CustStatementListResponseMessage,
    (request: EganowMoneyTransfer_pb.CustTransRequestMessage) => {
      return request.serializeBinary();
    },
    EganowMoneyTransfer_pb.CustStatementListResponseMessage.deserializeBinary
  );

  getCustomerEganowStatement(
    request: EganowMoneyTransfer_pb.CustTransRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<EganowMoneyTransfer_pb.CustStatementListResponseMessage>;

  getCustomerEganowStatement(
    request: EganowMoneyTransfer_pb.CustTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.CustStatementListResponseMessage) => void): grpcWeb.ClientReadableStream<EganowMoneyTransfer_pb.CustStatementListResponseMessage>;

  getCustomerEganowStatement(
    request: EganowMoneyTransfer_pb.CustTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: EganowMoneyTransfer_pb.CustStatementListResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowStatement',
        request,
        metadata || {},
        this.methodDescriptorGetCustomerEganowStatement,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/EganowMoneyTransfer.EganowMoneyTransferSvc/GetCustomerEganowStatement',
    request,
    metadata || {},
    this.methodDescriptorGetCustomerEganowStatement);
  }

}

