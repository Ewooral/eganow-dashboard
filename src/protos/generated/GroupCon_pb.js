// source: GroupCon.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.GroupCon.AcceptInviteRequestMessage', null, global);
goog.exportSymbol('proto.GroupCon.CountryGroupRequestMessage', null, global);
goog.exportSymbol('proto.GroupCon.CustomerGroupListResponseMessage', null, global);
goog.exportSymbol('proto.GroupCon.CustomerGroupResponseMessage', null, global);
goog.exportSymbol('proto.GroupCon.EmptyGroupMessage', null, global);
goog.exportSymbol('proto.GroupCon.GroupCategoryListMessage', null, global);
goog.exportSymbol('proto.GroupCon.GroupCategoryResponseMessage', null, global);
goog.exportSymbol('proto.GroupCon.GroupCountryCodeRequestMessage', null, global);
goog.exportSymbol('proto.GroupCon.GroupCountryListMessage', null, global);
goog.exportSymbol('proto.GroupCon.GroupCountryMessage', null, global);
goog.exportSymbol('proto.GroupCon.GroupMembersListResponseMessage', null, global);
goog.exportSymbol('proto.GroupCon.GroupMembersRequestMessage', null, global);
goog.exportSymbol('proto.GroupCon.GroupMembersResponseMessage', null, global);
goog.exportSymbol('proto.GroupCon.InviteListResponseMessage', null, global);
goog.exportSymbol('proto.GroupCon.InviteRequestMessage', null, global);
goog.exportSymbol('proto.GroupCon.InviteResponseMessage', null, global);
goog.exportSymbol('proto.GroupCon.LanguageGroupRequestMessage', null, global);
goog.exportSymbol('proto.GroupCon.NewGroupRequestMessage', null, global);
goog.exportSymbol('proto.GroupCon.ProjectListResponseMessage', null, global);
goog.exportSymbol('proto.GroupCon.ProjectOrGroupMembersRequestMessage', null, global);
goog.exportSymbol('proto.GroupCon.ProjectResponseMessage', null, global);
goog.exportSymbol('proto.GroupCon.ProjectTemplateListMessage', null, global);
goog.exportSymbol('proto.GroupCon.ProjectTemplateResponseMessage', null, global);
goog.exportSymbol('proto.GroupCon.RejectInviteRequestMessage', null, global);
goog.exportSymbol('proto.GroupCon.SuccessGroupMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.EmptyGroupMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.EmptyGroupMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.EmptyGroupMessage.displayName = 'proto.GroupCon.EmptyGroupMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.LanguageGroupRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.LanguageGroupRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.LanguageGroupRequestMessage.displayName = 'proto.GroupCon.LanguageGroupRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.SuccessGroupMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.SuccessGroupMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.SuccessGroupMessage.displayName = 'proto.GroupCon.SuccessGroupMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.CountryGroupRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.CountryGroupRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.CountryGroupRequestMessage.displayName = 'proto.GroupCon.CountryGroupRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.GroupCountryCodeRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.GroupCountryCodeRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.GroupCountryCodeRequestMessage.displayName = 'proto.GroupCon.GroupCountryCodeRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.GroupCategoryResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.GroupCategoryResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.GroupCategoryResponseMessage.displayName = 'proto.GroupCon.GroupCategoryResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.GroupCategoryListMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GroupCon.GroupCategoryListMessage.repeatedFields_, null);
};
goog.inherits(proto.GroupCon.GroupCategoryListMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.GroupCategoryListMessage.displayName = 'proto.GroupCon.GroupCategoryListMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.ProjectTemplateResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.ProjectTemplateResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.ProjectTemplateResponseMessage.displayName = 'proto.GroupCon.ProjectTemplateResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.ProjectTemplateListMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GroupCon.ProjectTemplateListMessage.repeatedFields_, null);
};
goog.inherits(proto.GroupCon.ProjectTemplateListMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.ProjectTemplateListMessage.displayName = 'proto.GroupCon.ProjectTemplateListMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.GroupCountryMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.GroupCountryMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.GroupCountryMessage.displayName = 'proto.GroupCon.GroupCountryMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.GroupCountryListMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GroupCon.GroupCountryListMessage.repeatedFields_, null);
};
goog.inherits(proto.GroupCon.GroupCountryListMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.GroupCountryListMessage.displayName = 'proto.GroupCon.GroupCountryListMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.NewGroupRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.NewGroupRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.NewGroupRequestMessage.displayName = 'proto.GroupCon.NewGroupRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.CustomerGroupResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.CustomerGroupResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.CustomerGroupResponseMessage.displayName = 'proto.GroupCon.CustomerGroupResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.CustomerGroupListResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GroupCon.CustomerGroupListResponseMessage.repeatedFields_, null);
};
goog.inherits(proto.GroupCon.CustomerGroupListResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.CustomerGroupListResponseMessage.displayName = 'proto.GroupCon.CustomerGroupListResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.ProjectOrGroupMembersRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.ProjectOrGroupMembersRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.ProjectOrGroupMembersRequestMessage.displayName = 'proto.GroupCon.ProjectOrGroupMembersRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.ProjectResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.ProjectResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.ProjectResponseMessage.displayName = 'proto.GroupCon.ProjectResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.ProjectListResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GroupCon.ProjectListResponseMessage.repeatedFields_, null);
};
goog.inherits(proto.GroupCon.ProjectListResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.ProjectListResponseMessage.displayName = 'proto.GroupCon.ProjectListResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.InviteRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.InviteRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.InviteRequestMessage.displayName = 'proto.GroupCon.InviteRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.InviteResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.InviteResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.InviteResponseMessage.displayName = 'proto.GroupCon.InviteResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.InviteListResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GroupCon.InviteListResponseMessage.repeatedFields_, null);
};
goog.inherits(proto.GroupCon.InviteListResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.InviteListResponseMessage.displayName = 'proto.GroupCon.InviteListResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.AcceptInviteRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.AcceptInviteRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.AcceptInviteRequestMessage.displayName = 'proto.GroupCon.AcceptInviteRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.RejectInviteRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.RejectInviteRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.RejectInviteRequestMessage.displayName = 'proto.GroupCon.RejectInviteRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.GroupMembersRequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.GroupMembersRequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.GroupMembersRequestMessage.displayName = 'proto.GroupCon.GroupMembersRequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.GroupMembersResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GroupCon.GroupMembersResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.GroupMembersResponseMessage.displayName = 'proto.GroupCon.GroupMembersResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GroupCon.GroupMembersListResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GroupCon.GroupMembersListResponseMessage.repeatedFields_, null);
};
goog.inherits(proto.GroupCon.GroupMembersListResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GroupCon.GroupMembersListResponseMessage.displayName = 'proto.GroupCon.GroupMembersListResponseMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.EmptyGroupMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.EmptyGroupMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.EmptyGroupMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.EmptyGroupMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.EmptyGroupMessage}
 */
proto.GroupCon.EmptyGroupMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.EmptyGroupMessage;
  return proto.GroupCon.EmptyGroupMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.EmptyGroupMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.EmptyGroupMessage}
 */
proto.GroupCon.EmptyGroupMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.EmptyGroupMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.EmptyGroupMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.EmptyGroupMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.EmptyGroupMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.LanguageGroupRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.LanguageGroupRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.LanguageGroupRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.LanguageGroupRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    languageid: jspb.Message.getFieldWithDefault(msg, 51, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.LanguageGroupRequestMessage}
 */
proto.GroupCon.LanguageGroupRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.LanguageGroupRequestMessage;
  return proto.GroupCon.LanguageGroupRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.LanguageGroupRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.LanguageGroupRequestMessage}
 */
proto.GroupCon.LanguageGroupRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.LanguageGroupRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.LanguageGroupRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.LanguageGroupRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.LanguageGroupRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
};


/**
 * optional string languageId = 51;
 * @return {string}
 */
proto.GroupCon.LanguageGroupRequestMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.LanguageGroupRequestMessage} returns this
 */
proto.GroupCon.LanguageGroupRequestMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 51, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.SuccessGroupMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.SuccessGroupMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.SuccessGroupMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.SuccessGroupMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuccess: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    messagesuccessfulorfailed: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    registrationerrorcode: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.SuccessGroupMessage}
 */
proto.GroupCon.SuccessGroupMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.SuccessGroupMessage;
  return proto.GroupCon.SuccessGroupMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.SuccessGroupMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.SuccessGroupMessage}
 */
proto.GroupCon.SuccessGroupMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessagesuccessfulorfailed(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegistrationerrorcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.SuccessGroupMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.SuccessGroupMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.SuccessGroupMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.SuccessGroupMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIssuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessagesuccessfulorfailed();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRegistrationerrorcode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool isSuccess = 1;
 * @return {boolean}
 */
proto.GroupCon.SuccessGroupMessage.prototype.getIssuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.GroupCon.SuccessGroupMessage} returns this
 */
proto.GroupCon.SuccessGroupMessage.prototype.setIssuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string messageSuccessfulOrFailed = 2;
 * @return {string}
 */
proto.GroupCon.SuccessGroupMessage.prototype.getMessagesuccessfulorfailed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.SuccessGroupMessage} returns this
 */
proto.GroupCon.SuccessGroupMessage.prototype.setMessagesuccessfulorfailed = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.GroupCon.SuccessGroupMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.SuccessGroupMessage} returns this
 */
proto.GroupCon.SuccessGroupMessage.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string registrationErrorCode = 4;
 * @return {string}
 */
proto.GroupCon.SuccessGroupMessage.prototype.getRegistrationerrorcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.SuccessGroupMessage} returns this
 */
proto.GroupCon.SuccessGroupMessage.prototype.setRegistrationerrorcode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.CountryGroupRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.CountryGroupRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.CountryGroupRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.CountryGroupRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    countrycode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 51, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.CountryGroupRequestMessage}
 */
proto.GroupCon.CountryGroupRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.CountryGroupRequestMessage;
  return proto.GroupCon.CountryGroupRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.CountryGroupRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.CountryGroupRequestMessage}
 */
proto.GroupCon.CountryGroupRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.CountryGroupRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.CountryGroupRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.CountryGroupRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.CountryGroupRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountrycode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
};


/**
 * optional string countryCode = 1;
 * @return {string}
 */
proto.GroupCon.CountryGroupRequestMessage.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.CountryGroupRequestMessage} returns this
 */
proto.GroupCon.CountryGroupRequestMessage.prototype.setCountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string languageId = 51;
 * @return {string}
 */
proto.GroupCon.CountryGroupRequestMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.CountryGroupRequestMessage} returns this
 */
proto.GroupCon.CountryGroupRequestMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 51, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.GroupCountryCodeRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.GroupCountryCodeRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.GroupCountryCodeRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.GroupCountryCodeRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    grouptype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    countrycode: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.GroupCountryCodeRequestMessage}
 */
proto.GroupCon.GroupCountryCodeRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.GroupCountryCodeRequestMessage;
  return proto.GroupCon.GroupCountryCodeRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.GroupCountryCodeRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.GroupCountryCodeRequestMessage}
 */
proto.GroupCon.GroupCountryCodeRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrouptype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.GroupCountryCodeRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.GroupCountryCodeRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.GroupCountryCodeRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.GroupCountryCodeRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrouptype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCountrycode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string groupType = 1;
 * @return {string}
 */
proto.GroupCon.GroupCountryCodeRequestMessage.prototype.getGrouptype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupCountryCodeRequestMessage} returns this
 */
proto.GroupCon.GroupCountryCodeRequestMessage.prototype.setGrouptype = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string countryCode = 2;
 * @return {string}
 */
proto.GroupCon.GroupCountryCodeRequestMessage.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupCountryCodeRequestMessage} returns this
 */
proto.GroupCon.GroupCountryCodeRequestMessage.prototype.setCountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.GroupCategoryResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.GroupCategoryResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.GroupCategoryResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.GroupCategoryResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    categoryid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    categoryname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    grouptype: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.GroupCategoryResponseMessage}
 */
proto.GroupCon.GroupCategoryResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.GroupCategoryResponseMessage;
  return proto.GroupCon.GroupCategoryResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.GroupCategoryResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.GroupCategoryResponseMessage}
 */
proto.GroupCon.GroupCategoryResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategoryid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategoryname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrouptype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.GroupCategoryResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.GroupCategoryResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.GroupCategoryResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.GroupCategoryResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCategoryid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCategoryname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGrouptype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string categoryId = 1;
 * @return {string}
 */
proto.GroupCon.GroupCategoryResponseMessage.prototype.getCategoryid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupCategoryResponseMessage} returns this
 */
proto.GroupCon.GroupCategoryResponseMessage.prototype.setCategoryid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string categoryName = 2;
 * @return {string}
 */
proto.GroupCon.GroupCategoryResponseMessage.prototype.getCategoryname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupCategoryResponseMessage} returns this
 */
proto.GroupCon.GroupCategoryResponseMessage.prototype.setCategoryname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string groupType = 3;
 * @return {string}
 */
proto.GroupCon.GroupCategoryResponseMessage.prototype.getGrouptype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupCategoryResponseMessage} returns this
 */
proto.GroupCon.GroupCategoryResponseMessage.prototype.setGrouptype = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GroupCon.GroupCategoryListMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.GroupCategoryListMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.GroupCategoryListMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.GroupCategoryListMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.GroupCategoryListMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    categorylistList: jspb.Message.toObjectList(msg.getCategorylistList(),
    proto.GroupCon.GroupCategoryResponseMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.GroupCategoryListMessage}
 */
proto.GroupCon.GroupCategoryListMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.GroupCategoryListMessage;
  return proto.GroupCon.GroupCategoryListMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.GroupCategoryListMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.GroupCategoryListMessage}
 */
proto.GroupCon.GroupCategoryListMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GroupCon.GroupCategoryResponseMessage;
      reader.readMessage(value,proto.GroupCon.GroupCategoryResponseMessage.deserializeBinaryFromReader);
      msg.addCategorylist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.GroupCategoryListMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.GroupCategoryListMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.GroupCategoryListMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.GroupCategoryListMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCategorylistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GroupCon.GroupCategoryResponseMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GroupCategoryResponseMessage categorylist = 1;
 * @return {!Array<!proto.GroupCon.GroupCategoryResponseMessage>}
 */
proto.GroupCon.GroupCategoryListMessage.prototype.getCategorylistList = function() {
  return /** @type{!Array<!proto.GroupCon.GroupCategoryResponseMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GroupCon.GroupCategoryResponseMessage, 1));
};


/**
 * @param {!Array<!proto.GroupCon.GroupCategoryResponseMessage>} value
 * @return {!proto.GroupCon.GroupCategoryListMessage} returns this
*/
proto.GroupCon.GroupCategoryListMessage.prototype.setCategorylistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GroupCon.GroupCategoryResponseMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GroupCon.GroupCategoryResponseMessage}
 */
proto.GroupCon.GroupCategoryListMessage.prototype.addCategorylist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GroupCon.GroupCategoryResponseMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GroupCon.GroupCategoryListMessage} returns this
 */
proto.GroupCon.GroupCategoryListMessage.prototype.clearCategorylistList = function() {
  return this.setCategorylistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.ProjectTemplateResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.ProjectTemplateResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.ProjectTemplateResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.ProjectTemplateResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    templateid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    templatename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    grouptype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    remarks: jspb.Message.getFieldWithDefault(msg, 5, ""),
    templateiconurl: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.ProjectTemplateResponseMessage}
 */
proto.GroupCon.ProjectTemplateResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.ProjectTemplateResponseMessage;
  return proto.GroupCon.ProjectTemplateResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.ProjectTemplateResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.ProjectTemplateResponseMessage}
 */
proto.GroupCon.ProjectTemplateResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemplateid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemplatename(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrouptype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemarks(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemplateiconurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.ProjectTemplateResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.ProjectTemplateResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.ProjectTemplateResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.ProjectTemplateResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemplateid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTemplatename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGrouptype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRemarks();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTemplateiconurl();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string TemplateId = 1;
 * @return {string}
 */
proto.GroupCon.ProjectTemplateResponseMessage.prototype.getTemplateid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectTemplateResponseMessage} returns this
 */
proto.GroupCon.ProjectTemplateResponseMessage.prototype.setTemplateid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string TemplateName = 2;
 * @return {string}
 */
proto.GroupCon.ProjectTemplateResponseMessage.prototype.getTemplatename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectTemplateResponseMessage} returns this
 */
proto.GroupCon.ProjectTemplateResponseMessage.prototype.setTemplatename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string groupType = 3;
 * @return {string}
 */
proto.GroupCon.ProjectTemplateResponseMessage.prototype.getGrouptype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectTemplateResponseMessage} returns this
 */
proto.GroupCon.ProjectTemplateResponseMessage.prototype.setGrouptype = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Remarks = 5;
 * @return {string}
 */
proto.GroupCon.ProjectTemplateResponseMessage.prototype.getRemarks = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectTemplateResponseMessage} returns this
 */
proto.GroupCon.ProjectTemplateResponseMessage.prototype.setRemarks = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string TemplateIconUrl = 10;
 * @return {string}
 */
proto.GroupCon.ProjectTemplateResponseMessage.prototype.getTemplateiconurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectTemplateResponseMessage} returns this
 */
proto.GroupCon.ProjectTemplateResponseMessage.prototype.setTemplateiconurl = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GroupCon.ProjectTemplateListMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.ProjectTemplateListMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.ProjectTemplateListMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.ProjectTemplateListMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.ProjectTemplateListMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    templatelistList: jspb.Message.toObjectList(msg.getTemplatelistList(),
    proto.GroupCon.ProjectTemplateResponseMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.ProjectTemplateListMessage}
 */
proto.GroupCon.ProjectTemplateListMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.ProjectTemplateListMessage;
  return proto.GroupCon.ProjectTemplateListMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.ProjectTemplateListMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.ProjectTemplateListMessage}
 */
proto.GroupCon.ProjectTemplateListMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GroupCon.ProjectTemplateResponseMessage;
      reader.readMessage(value,proto.GroupCon.ProjectTemplateResponseMessage.deserializeBinaryFromReader);
      msg.addTemplatelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.ProjectTemplateListMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.ProjectTemplateListMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.ProjectTemplateListMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.ProjectTemplateListMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemplatelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GroupCon.ProjectTemplateResponseMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProjectTemplateResponseMessage templatelist = 1;
 * @return {!Array<!proto.GroupCon.ProjectTemplateResponseMessage>}
 */
proto.GroupCon.ProjectTemplateListMessage.prototype.getTemplatelistList = function() {
  return /** @type{!Array<!proto.GroupCon.ProjectTemplateResponseMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GroupCon.ProjectTemplateResponseMessage, 1));
};


/**
 * @param {!Array<!proto.GroupCon.ProjectTemplateResponseMessage>} value
 * @return {!proto.GroupCon.ProjectTemplateListMessage} returns this
*/
proto.GroupCon.ProjectTemplateListMessage.prototype.setTemplatelistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GroupCon.ProjectTemplateResponseMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GroupCon.ProjectTemplateResponseMessage}
 */
proto.GroupCon.ProjectTemplateListMessage.prototype.addTemplatelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GroupCon.ProjectTemplateResponseMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GroupCon.ProjectTemplateListMessage} returns this
 */
proto.GroupCon.ProjectTemplateListMessage.prototype.clearTemplatelistList = function() {
  return this.setTemplatelistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.GroupCountryMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.GroupCountryMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.GroupCountryMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.GroupCountryMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    countrycode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    countrydialcode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    countryname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    currencyiso: jspb.Message.getFieldWithDefault(msg, 4, ""),
    mobilenominlen: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mobilenomaxlen: jspb.Message.getFieldWithDefault(msg, 6, 0),
    countryflagurl: jspb.Message.getFieldWithDefault(msg, 30, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.GroupCountryMessage}
 */
proto.GroupCon.GroupCountryMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.GroupCountryMessage;
  return proto.GroupCon.GroupCountryMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.GroupCountryMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.GroupCountryMessage}
 */
proto.GroupCon.GroupCountryMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrydialcode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrencyiso(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMobilenominlen(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMobilenomaxlen(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryflagurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.GroupCountryMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.GroupCountryMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.GroupCountryMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.GroupCountryMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountrycode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCountrydialcode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCountryname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCurrencyiso();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMobilenominlen();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getMobilenomaxlen();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCountryflagurl();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
};


/**
 * optional string countryCode = 1;
 * @return {string}
 */
proto.GroupCon.GroupCountryMessage.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupCountryMessage} returns this
 */
proto.GroupCon.GroupCountryMessage.prototype.setCountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string countryDialCode = 2;
 * @return {string}
 */
proto.GroupCon.GroupCountryMessage.prototype.getCountrydialcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupCountryMessage} returns this
 */
proto.GroupCon.GroupCountryMessage.prototype.setCountrydialcode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string countryName = 3;
 * @return {string}
 */
proto.GroupCon.GroupCountryMessage.prototype.getCountryname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupCountryMessage} returns this
 */
proto.GroupCon.GroupCountryMessage.prototype.setCountryname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string currencyIso = 4;
 * @return {string}
 */
proto.GroupCon.GroupCountryMessage.prototype.getCurrencyiso = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupCountryMessage} returns this
 */
proto.GroupCon.GroupCountryMessage.prototype.setCurrencyiso = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 mobileNoMinLen = 5;
 * @return {number}
 */
proto.GroupCon.GroupCountryMessage.prototype.getMobilenominlen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.GroupCountryMessage} returns this
 */
proto.GroupCon.GroupCountryMessage.prototype.setMobilenominlen = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 mobileNoMaxLen = 6;
 * @return {number}
 */
proto.GroupCon.GroupCountryMessage.prototype.getMobilenomaxlen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.GroupCountryMessage} returns this
 */
proto.GroupCon.GroupCountryMessage.prototype.setMobilenomaxlen = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string countryFlagUrl = 30;
 * @return {string}
 */
proto.GroupCon.GroupCountryMessage.prototype.getCountryflagurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupCountryMessage} returns this
 */
proto.GroupCon.GroupCountryMessage.prototype.setCountryflagurl = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GroupCon.GroupCountryListMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.GroupCountryListMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.GroupCountryListMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.GroupCountryListMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.GroupCountryListMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    countrylistList: jspb.Message.toObjectList(msg.getCountrylistList(),
    proto.GroupCon.GroupCountryMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.GroupCountryListMessage}
 */
proto.GroupCon.GroupCountryListMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.GroupCountryListMessage;
  return proto.GroupCon.GroupCountryListMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.GroupCountryListMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.GroupCountryListMessage}
 */
proto.GroupCon.GroupCountryListMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GroupCon.GroupCountryMessage;
      reader.readMessage(value,proto.GroupCon.GroupCountryMessage.deserializeBinaryFromReader);
      msg.addCountrylist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.GroupCountryListMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.GroupCountryListMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.GroupCountryListMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.GroupCountryListMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountrylistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GroupCon.GroupCountryMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GroupCountryMessage countrylist = 1;
 * @return {!Array<!proto.GroupCon.GroupCountryMessage>}
 */
proto.GroupCon.GroupCountryListMessage.prototype.getCountrylistList = function() {
  return /** @type{!Array<!proto.GroupCon.GroupCountryMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GroupCon.GroupCountryMessage, 1));
};


/**
 * @param {!Array<!proto.GroupCon.GroupCountryMessage>} value
 * @return {!proto.GroupCon.GroupCountryListMessage} returns this
*/
proto.GroupCon.GroupCountryListMessage.prototype.setCountrylistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GroupCon.GroupCountryMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GroupCon.GroupCountryMessage}
 */
proto.GroupCon.GroupCountryListMessage.prototype.addCountrylist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GroupCon.GroupCountryMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GroupCon.GroupCountryListMessage} returns this
 */
proto.GroupCon.GroupCountryListMessage.prototype.clearCountrylistList = function() {
  return this.setCountrylistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.NewGroupRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.NewGroupRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.NewGroupRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    aboutthegroup: jspb.Message.getFieldWithDefault(msg, 3, ""),
    grouptype: jspb.Message.getFieldWithDefault(msg, 4, ""),
    countrycode: jspb.Message.getFieldWithDefault(msg, 9, ""),
    categoryid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    templateid: jspb.Message.getFieldWithDefault(msg, 30, ""),
    projectname: jspb.Message.getFieldWithDefault(msg, 31, ""),
    abouttheproject: jspb.Message.getFieldWithDefault(msg, 32, ""),
    projectdurationinmonths: jspb.Message.getFieldWithDefault(msg, 35, 0),
    insurancepackageid: jspb.Message.getFieldWithDefault(msg, 36, ""),
    contributiontypeweeklyormonthly: jspb.Message.getFieldWithDefault(msg, 37, ""),
    contributionfrequencyinweeksormonths: jspb.Message.getFieldWithDefault(msg, 38, 0),
    contributionamountpermember: jspb.Message.getFloatingPointFieldWithDefault(msg, 39, 0.0),
    targetamounttoraise: jspb.Message.getFloatingPointFieldWithDefault(msg, 40, 0.0),
    groupiconimageinbasesixtyfour: jspb.Message.getFieldWithDefault(msg, 59, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 50, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.NewGroupRequestMessage}
 */
proto.GroupCon.NewGroupRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.NewGroupRequestMessage;
  return proto.GroupCon.NewGroupRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.NewGroupRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.NewGroupRequestMessage}
 */
proto.GroupCon.NewGroupRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAboutthegroup(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrouptype(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategoryid(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemplateid(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectname(value);
      break;
    case 32:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbouttheproject(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProjectdurationinmonths(value);
      break;
    case 36:
      var value = /** @type {string} */ (reader.readString());
      msg.setInsurancepackageid(value);
      break;
    case 37:
      var value = /** @type {string} */ (reader.readString());
      msg.setContributiontypeweeklyormonthly(value);
      break;
    case 38:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContributionfrequencyinweeksormonths(value);
      break;
    case 39:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setContributionamountpermember(value);
      break;
    case 40:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTargetamounttoraise(value);
      break;
    case 59:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupiconimageinbasesixtyfour(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.NewGroupRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.NewGroupRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.NewGroupRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAboutthegroup();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGrouptype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCountrycode();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCategoryid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTemplateid();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getProjectname();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
  f = message.getAbouttheproject();
  if (f.length > 0) {
    writer.writeString(
      32,
      f
    );
  }
  f = message.getProjectdurationinmonths();
  if (f !== 0) {
    writer.writeInt32(
      35,
      f
    );
  }
  f = message.getInsurancepackageid();
  if (f.length > 0) {
    writer.writeString(
      36,
      f
    );
  }
  f = message.getContributiontypeweeklyormonthly();
  if (f.length > 0) {
    writer.writeString(
      37,
      f
    );
  }
  f = message.getContributionfrequencyinweeksormonths();
  if (f !== 0) {
    writer.writeInt32(
      38,
      f
    );
  }
  f = message.getContributionamountpermember();
  if (f !== 0.0) {
    writer.writeDouble(
      39,
      f
    );
  }
  f = message.getTargetamounttoraise();
  if (f !== 0.0) {
    writer.writeDouble(
      40,
      f
    );
  }
  f = message.getGroupiconimageinbasesixtyfour();
  if (f.length > 0) {
    writer.writeString(
      59,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
};


/**
 * optional string groupName = 2;
 * @return {string}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.NewGroupRequestMessage} returns this
 */
proto.GroupCon.NewGroupRequestMessage.prototype.setGroupname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string AboutTheGroup = 3;
 * @return {string}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.getAboutthegroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.NewGroupRequestMessage} returns this
 */
proto.GroupCon.NewGroupRequestMessage.prototype.setAboutthegroup = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string groupType = 4;
 * @return {string}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.getGrouptype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.NewGroupRequestMessage} returns this
 */
proto.GroupCon.NewGroupRequestMessage.prototype.setGrouptype = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string countryCode = 9;
 * @return {string}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.NewGroupRequestMessage} returns this
 */
proto.GroupCon.NewGroupRequestMessage.prototype.setCountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string categoryId = 11;
 * @return {string}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.getCategoryid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.NewGroupRequestMessage} returns this
 */
proto.GroupCon.NewGroupRequestMessage.prototype.setCategoryid = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string templateId = 30;
 * @return {string}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.getTemplateid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.NewGroupRequestMessage} returns this
 */
proto.GroupCon.NewGroupRequestMessage.prototype.setTemplateid = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional string projectName = 31;
 * @return {string}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.getProjectname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.NewGroupRequestMessage} returns this
 */
proto.GroupCon.NewGroupRequestMessage.prototype.setProjectname = function(value) {
  return jspb.Message.setProto3StringField(this, 31, value);
};


/**
 * optional string aboutTheProject = 32;
 * @return {string}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.getAbouttheproject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 32, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.NewGroupRequestMessage} returns this
 */
proto.GroupCon.NewGroupRequestMessage.prototype.setAbouttheproject = function(value) {
  return jspb.Message.setProto3StringField(this, 32, value);
};


/**
 * optional int32 projectDurationInMonths = 35;
 * @return {number}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.getProjectdurationinmonths = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 35, 0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.NewGroupRequestMessage} returns this
 */
proto.GroupCon.NewGroupRequestMessage.prototype.setProjectdurationinmonths = function(value) {
  return jspb.Message.setProto3IntField(this, 35, value);
};


/**
 * optional string insurancePackageId = 36;
 * @return {string}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.getInsurancepackageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 36, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.NewGroupRequestMessage} returns this
 */
proto.GroupCon.NewGroupRequestMessage.prototype.setInsurancepackageid = function(value) {
  return jspb.Message.setProto3StringField(this, 36, value);
};


/**
 * optional string contributionTypeWeeklyOrMonthly = 37;
 * @return {string}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.getContributiontypeweeklyormonthly = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 37, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.NewGroupRequestMessage} returns this
 */
proto.GroupCon.NewGroupRequestMessage.prototype.setContributiontypeweeklyormonthly = function(value) {
  return jspb.Message.setProto3StringField(this, 37, value);
};


/**
 * optional int32 contributionFrequencyInWeeksOrMonths = 38;
 * @return {number}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.getContributionfrequencyinweeksormonths = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 38, 0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.NewGroupRequestMessage} returns this
 */
proto.GroupCon.NewGroupRequestMessage.prototype.setContributionfrequencyinweeksormonths = function(value) {
  return jspb.Message.setProto3IntField(this, 38, value);
};


/**
 * optional double contributionAmountPerMember = 39;
 * @return {number}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.getContributionamountpermember = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 39, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.NewGroupRequestMessage} returns this
 */
proto.GroupCon.NewGroupRequestMessage.prototype.setContributionamountpermember = function(value) {
  return jspb.Message.setProto3FloatField(this, 39, value);
};


/**
 * optional double targetAmountToRaise = 40;
 * @return {number}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.getTargetamounttoraise = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 40, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.NewGroupRequestMessage} returns this
 */
proto.GroupCon.NewGroupRequestMessage.prototype.setTargetamounttoraise = function(value) {
  return jspb.Message.setProto3FloatField(this, 40, value);
};


/**
 * optional string groupIconImageInBaseSixtyFour = 59;
 * @return {string}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.getGroupiconimageinbasesixtyfour = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 59, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.NewGroupRequestMessage} returns this
 */
proto.GroupCon.NewGroupRequestMessage.prototype.setGroupiconimageinbasesixtyfour = function(value) {
  return jspb.Message.setProto3StringField(this, 59, value);
};


/**
 * optional string languageId = 50;
 * @return {string}
 */
proto.GroupCon.NewGroupRequestMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.NewGroupRequestMessage} returns this
 */
proto.GroupCon.NewGroupRequestMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 50, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.CustomerGroupResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.CustomerGroupResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.CustomerGroupResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    groupname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    aboutthegroup: jspb.Message.getFieldWithDefault(msg, 3, ""),
    countrycode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    countryname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    grouptype: jspb.Message.getFieldWithDefault(msg, 11, ""),
    categoryname: jspb.Message.getFieldWithDefault(msg, 12, ""),
    categoryid: jspb.Message.getFieldWithDefault(msg, 13, ""),
    groupstatus: jspb.Message.getFieldWithDefault(msg, 30, ""),
    totalgroupmembers: jspb.Message.getFieldWithDefault(msg, 35, 0),
    groupdescription: jspb.Message.getFieldWithDefault(msg, 36, ""),
    verifiedstatus: jspb.Message.getFieldWithDefault(msg, 37, ""),
    groupiconurl: jspb.Message.getFieldWithDefault(msg, 38, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 50, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.CustomerGroupResponseMessage}
 */
proto.GroupCon.CustomerGroupResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.CustomerGroupResponseMessage;
  return proto.GroupCon.CustomerGroupResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.CustomerGroupResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.CustomerGroupResponseMessage}
 */
proto.GroupCon.CustomerGroupResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAboutthegroup(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryname(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrouptype(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategoryname(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategoryid(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupstatus(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalgroupmembers(value);
      break;
    case 36:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupdescription(value);
      break;
    case 37:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifiedstatus(value);
      break;
    case 38:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupiconurl(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.CustomerGroupResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.CustomerGroupResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.CustomerGroupResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroupname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAboutthegroup();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCountrycode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCountryname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGrouptype();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getCategoryname();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getCategoryid();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getGroupstatus();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getTotalgroupmembers();
  if (f !== 0) {
    writer.writeInt32(
      35,
      f
    );
  }
  f = message.getGroupdescription();
  if (f.length > 0) {
    writer.writeString(
      36,
      f
    );
  }
  f = message.getVerifiedstatus();
  if (f.length > 0) {
    writer.writeString(
      37,
      f
    );
  }
  f = message.getGroupiconurl();
  if (f.length > 0) {
    writer.writeString(
      38,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
};


/**
 * optional string groupId = 1;
 * @return {string}
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.CustomerGroupResponseMessage} returns this
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string groupName = 2;
 * @return {string}
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.CustomerGroupResponseMessage} returns this
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.setGroupname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string aboutTheGroup = 3;
 * @return {string}
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.getAboutthegroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.CustomerGroupResponseMessage} returns this
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.setAboutthegroup = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string countryCode = 4;
 * @return {string}
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.CustomerGroupResponseMessage} returns this
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.setCountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string countryName = 5;
 * @return {string}
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.getCountryname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.CustomerGroupResponseMessage} returns this
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.setCountryname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string groupType = 11;
 * @return {string}
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.getGrouptype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.CustomerGroupResponseMessage} returns this
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.setGrouptype = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string categoryName = 12;
 * @return {string}
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.getCategoryname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.CustomerGroupResponseMessage} returns this
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.setCategoryname = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string categoryId = 13;
 * @return {string}
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.getCategoryid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.CustomerGroupResponseMessage} returns this
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.setCategoryid = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string groupStatus = 30;
 * @return {string}
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.getGroupstatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.CustomerGroupResponseMessage} returns this
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.setGroupstatus = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional int32 totalGroupMembers = 35;
 * @return {number}
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.getTotalgroupmembers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 35, 0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.CustomerGroupResponseMessage} returns this
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.setTotalgroupmembers = function(value) {
  return jspb.Message.setProto3IntField(this, 35, value);
};


/**
 * optional string groupDescription = 36;
 * @return {string}
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.getGroupdescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 36, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.CustomerGroupResponseMessage} returns this
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.setGroupdescription = function(value) {
  return jspb.Message.setProto3StringField(this, 36, value);
};


/**
 * optional string verifiedStatus = 37;
 * @return {string}
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.getVerifiedstatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 37, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.CustomerGroupResponseMessage} returns this
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.setVerifiedstatus = function(value) {
  return jspb.Message.setProto3StringField(this, 37, value);
};


/**
 * optional string groupIconUrl = 38;
 * @return {string}
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.getGroupiconurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 38, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.CustomerGroupResponseMessage} returns this
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.setGroupiconurl = function(value) {
  return jspb.Message.setProto3StringField(this, 38, value);
};


/**
 * optional string languageId = 50;
 * @return {string}
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.CustomerGroupResponseMessage} returns this
 */
proto.GroupCon.CustomerGroupResponseMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 50, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GroupCon.CustomerGroupListResponseMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.CustomerGroupListResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.CustomerGroupListResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.CustomerGroupListResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.CustomerGroupListResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    grouplistList: jspb.Message.toObjectList(msg.getGrouplistList(),
    proto.GroupCon.CustomerGroupResponseMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.CustomerGroupListResponseMessage}
 */
proto.GroupCon.CustomerGroupListResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.CustomerGroupListResponseMessage;
  return proto.GroupCon.CustomerGroupListResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.CustomerGroupListResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.CustomerGroupListResponseMessage}
 */
proto.GroupCon.CustomerGroupListResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GroupCon.CustomerGroupResponseMessage;
      reader.readMessage(value,proto.GroupCon.CustomerGroupResponseMessage.deserializeBinaryFromReader);
      msg.addGrouplist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.CustomerGroupListResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.CustomerGroupListResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.CustomerGroupListResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.CustomerGroupListResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrouplistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GroupCon.CustomerGroupResponseMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CustomerGroupResponseMessage groupList = 1;
 * @return {!Array<!proto.GroupCon.CustomerGroupResponseMessage>}
 */
proto.GroupCon.CustomerGroupListResponseMessage.prototype.getGrouplistList = function() {
  return /** @type{!Array<!proto.GroupCon.CustomerGroupResponseMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GroupCon.CustomerGroupResponseMessage, 1));
};


/**
 * @param {!Array<!proto.GroupCon.CustomerGroupResponseMessage>} value
 * @return {!proto.GroupCon.CustomerGroupListResponseMessage} returns this
*/
proto.GroupCon.CustomerGroupListResponseMessage.prototype.setGrouplistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GroupCon.CustomerGroupResponseMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GroupCon.CustomerGroupResponseMessage}
 */
proto.GroupCon.CustomerGroupListResponseMessage.prototype.addGrouplist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GroupCon.CustomerGroupResponseMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GroupCon.CustomerGroupListResponseMessage} returns this
 */
proto.GroupCon.CustomerGroupListResponseMessage.prototype.clearGrouplistList = function() {
  return this.setGrouplistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.ProjectOrGroupMembersRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.ProjectOrGroupMembersRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.ProjectOrGroupMembersRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.ProjectOrGroupMembersRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    groupcountrycode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 51, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.ProjectOrGroupMembersRequestMessage}
 */
proto.GroupCon.ProjectOrGroupMembersRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.ProjectOrGroupMembersRequestMessage;
  return proto.GroupCon.ProjectOrGroupMembersRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.ProjectOrGroupMembersRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.ProjectOrGroupMembersRequestMessage}
 */
proto.GroupCon.ProjectOrGroupMembersRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupcountrycode(value);
      break;
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.ProjectOrGroupMembersRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.ProjectOrGroupMembersRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.ProjectOrGroupMembersRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.ProjectOrGroupMembersRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroupcountrycode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
};


/**
 * optional string groupId = 1;
 * @return {string}
 */
proto.GroupCon.ProjectOrGroupMembersRequestMessage.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectOrGroupMembersRequestMessage} returns this
 */
proto.GroupCon.ProjectOrGroupMembersRequestMessage.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string groupCountryCode = 2;
 * @return {string}
 */
proto.GroupCon.ProjectOrGroupMembersRequestMessage.prototype.getGroupcountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectOrGroupMembersRequestMessage} returns this
 */
proto.GroupCon.ProjectOrGroupMembersRequestMessage.prototype.setGroupcountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string languageId = 51;
 * @return {string}
 */
proto.GroupCon.ProjectOrGroupMembersRequestMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectOrGroupMembersRequestMessage} returns this
 */
proto.GroupCon.ProjectOrGroupMembersRequestMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 51, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.ProjectResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.ProjectResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.ProjectResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.ProjectResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    projectname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    abouttheproject: jspb.Message.getFieldWithDefault(msg, 3, ""),
    projectdescription: jspb.Message.getFieldWithDefault(msg, 4, ""),
    targetamounttoraise: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    amountraised: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    balancetoraise: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    cashedoutamount: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    cashbalance: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    platformfeeamount: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    taxamount: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    contributionamountpermember: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    startdate: jspb.Message.getFieldWithDefault(msg, 13, ""),
    enddate: jspb.Message.getFieldWithDefault(msg, 14, ""),
    contributiontypeweeklyormonthly: jspb.Message.getFieldWithDefault(msg, 15, ""),
    noofmembersinproject: jspb.Message.getFieldWithDefault(msg, 16, 0),
    countrycode: jspb.Message.getFieldWithDefault(msg, 17, ""),
    countryname: jspb.Message.getFieldWithDefault(msg, 18, ""),
    groupid: jspb.Message.getFieldWithDefault(msg, 19, ""),
    projecticonurl: jspb.Message.getFieldWithDefault(msg, 20, ""),
    projectvideourl: jspb.Message.getFieldWithDefault(msg, 21, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 50, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.ProjectResponseMessage}
 */
proto.GroupCon.ProjectResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.ProjectResponseMessage;
  return proto.GroupCon.ProjectResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.ProjectResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.ProjectResponseMessage}
 */
proto.GroupCon.ProjectResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbouttheproject(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectdescription(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTargetamounttoraise(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmountraised(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBalancetoraise(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCashedoutamount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCashbalance(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPlatformfeeamount(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTaxamount(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setContributionamountpermember(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartdate(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnddate(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setContributiontypeweeklyormonthly(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNoofmembersinproject(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryname(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjecticonurl(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectvideourl(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.ProjectResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.ProjectResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.ProjectResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.ProjectResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProjectname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAbouttheproject();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProjectdescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTargetamounttoraise();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getAmountraised();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getBalancetoraise();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getCashedoutamount();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getCashbalance();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getPlatformfeeamount();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getTaxamount();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getContributionamountpermember();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getStartdate();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getEnddate();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getContributiontypeweeklyormonthly();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getNoofmembersinproject();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getCountrycode();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getCountryname();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getProjecticonurl();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getProjectvideourl();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
};


/**
 * optional string projectId = 1;
 * @return {string}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getProjectid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setProjectid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string projectName = 2;
 * @return {string}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getProjectname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setProjectname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string aboutTheProject = 3;
 * @return {string}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getAbouttheproject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setAbouttheproject = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string projectDescription = 4;
 * @return {string}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getProjectdescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setProjectdescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double targetAmountToRaise = 5;
 * @return {number}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getTargetamounttoraise = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setTargetamounttoraise = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double amountRaised = 6;
 * @return {number}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getAmountraised = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setAmountraised = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double balanceToRaise = 7;
 * @return {number}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getBalancetoraise = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setBalancetoraise = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double cashedOutAmount = 8;
 * @return {number}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getCashedoutamount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setCashedoutamount = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double cashBalance = 9;
 * @return {number}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getCashbalance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setCashbalance = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double platformFeeAmount = 10;
 * @return {number}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getPlatformfeeamount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setPlatformfeeamount = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double taxAmount = 11;
 * @return {number}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getTaxamount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setTaxamount = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double contributionAmountPerMember = 12;
 * @return {number}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getContributionamountpermember = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setContributionamountpermember = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional string startDate = 13;
 * @return {string}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getStartdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setStartdate = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string endDate = 14;
 * @return {string}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getEnddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setEnddate = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string contributionTypeWeeklyOrMonthly = 15;
 * @return {string}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getContributiontypeweeklyormonthly = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setContributiontypeweeklyormonthly = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional int32 noOfMembersInProject = 16;
 * @return {number}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getNoofmembersinproject = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setNoofmembersinproject = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional string countryCode = 17;
 * @return {string}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setCountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string countryName = 18;
 * @return {string}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getCountryname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setCountryname = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string groupId = 19;
 * @return {string}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string projectIconUrl = 20;
 * @return {string}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getProjecticonurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setProjecticonurl = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string projectVideoUrl = 21;
 * @return {string}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getProjectvideourl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setProjectvideourl = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string languageId = 50;
 * @return {string}
 */
proto.GroupCon.ProjectResponseMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.ProjectResponseMessage} returns this
 */
proto.GroupCon.ProjectResponseMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 50, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GroupCon.ProjectListResponseMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.ProjectListResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.ProjectListResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.ProjectListResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.ProjectListResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    grouplistList: jspb.Message.toObjectList(msg.getGrouplistList(),
    proto.GroupCon.ProjectResponseMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.ProjectListResponseMessage}
 */
proto.GroupCon.ProjectListResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.ProjectListResponseMessage;
  return proto.GroupCon.ProjectListResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.ProjectListResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.ProjectListResponseMessage}
 */
proto.GroupCon.ProjectListResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GroupCon.ProjectResponseMessage;
      reader.readMessage(value,proto.GroupCon.ProjectResponseMessage.deserializeBinaryFromReader);
      msg.addGrouplist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.ProjectListResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.ProjectListResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.ProjectListResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.ProjectListResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrouplistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GroupCon.ProjectResponseMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProjectResponseMessage groupList = 1;
 * @return {!Array<!proto.GroupCon.ProjectResponseMessage>}
 */
proto.GroupCon.ProjectListResponseMessage.prototype.getGrouplistList = function() {
  return /** @type{!Array<!proto.GroupCon.ProjectResponseMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GroupCon.ProjectResponseMessage, 1));
};


/**
 * @param {!Array<!proto.GroupCon.ProjectResponseMessage>} value
 * @return {!proto.GroupCon.ProjectListResponseMessage} returns this
*/
proto.GroupCon.ProjectListResponseMessage.prototype.setGrouplistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GroupCon.ProjectResponseMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GroupCon.ProjectResponseMessage}
 */
proto.GroupCon.ProjectListResponseMessage.prototype.addGrouplist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GroupCon.ProjectResponseMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GroupCon.ProjectListResponseMessage} returns this
 */
proto.GroupCon.ProjectListResponseMessage.prototype.clearGrouplistList = function() {
  return this.setGrouplistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.InviteRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.InviteRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.InviteRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.InviteRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    inviteemobileno: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inviteeemail: jspb.Message.getFieldWithDefault(msg, 2, ""),
    inviteemobilecountrycode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    groupid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    groupcountrycode: jspb.Message.getFieldWithDefault(msg, 6, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 51, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.InviteRequestMessage}
 */
proto.GroupCon.InviteRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.InviteRequestMessage;
  return proto.GroupCon.InviteRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.InviteRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.InviteRequestMessage}
 */
proto.GroupCon.InviteRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteemobileno(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteeemail(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteemobilecountrycode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupcountrycode(value);
      break;
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.InviteRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.InviteRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.InviteRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.InviteRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInviteemobileno();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInviteeemail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInviteemobilecountrycode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGroupcountrycode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
};


/**
 * optional string inviteeMobileNo = 1;
 * @return {string}
 */
proto.GroupCon.InviteRequestMessage.prototype.getInviteemobileno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteRequestMessage} returns this
 */
proto.GroupCon.InviteRequestMessage.prototype.setInviteemobileno = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string inviteeEmail = 2;
 * @return {string}
 */
proto.GroupCon.InviteRequestMessage.prototype.getInviteeemail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteRequestMessage} returns this
 */
proto.GroupCon.InviteRequestMessage.prototype.setInviteeemail = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string inviteeMobileCountryCode = 3;
 * @return {string}
 */
proto.GroupCon.InviteRequestMessage.prototype.getInviteemobilecountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteRequestMessage} returns this
 */
proto.GroupCon.InviteRequestMessage.prototype.setInviteemobilecountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string groupId = 5;
 * @return {string}
 */
proto.GroupCon.InviteRequestMessage.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteRequestMessage} returns this
 */
proto.GroupCon.InviteRequestMessage.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string groupCountryCode = 6;
 * @return {string}
 */
proto.GroupCon.InviteRequestMessage.prototype.getGroupcountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteRequestMessage} returns this
 */
proto.GroupCon.InviteRequestMessage.prototype.setGroupcountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string languageId = 51;
 * @return {string}
 */
proto.GroupCon.InviteRequestMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteRequestMessage} returns this
 */
proto.GroupCon.InviteRequestMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 51, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.InviteResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.InviteResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.InviteResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.InviteResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    inviteemobileno: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inviteeemail: jspb.Message.getFieldWithDefault(msg, 2, ""),
    inviteemobilecountrycode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    groupid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    groupcountrycode: jspb.Message.getFieldWithDefault(msg, 6, ""),
    groupname: jspb.Message.getFieldWithDefault(msg, 7, ""),
    aboutthegroup: jspb.Message.getFieldWithDefault(msg, 8, ""),
    countryname: jspb.Message.getFieldWithDefault(msg, 9, ""),
    grouptype: jspb.Message.getFieldWithDefault(msg, 11, ""),
    categoryname: jspb.Message.getFieldWithDefault(msg, 12, ""),
    categoryid: jspb.Message.getFieldWithDefault(msg, 13, ""),
    invitebyname: jspb.Message.getFieldWithDefault(msg, 14, ""),
    groupstatus: jspb.Message.getFieldWithDefault(msg, 30, ""),
    totalgroupmembers: jspb.Message.getFieldWithDefault(msg, 35, 0),
    groupdescription: jspb.Message.getFieldWithDefault(msg, 36, ""),
    verifiedstatus: jspb.Message.getFieldWithDefault(msg, 37, ""),
    groupiconurl: jspb.Message.getFieldWithDefault(msg, 38, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 50, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.InviteResponseMessage}
 */
proto.GroupCon.InviteResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.InviteResponseMessage;
  return proto.GroupCon.InviteResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.InviteResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.InviteResponseMessage}
 */
proto.GroupCon.InviteResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteemobileno(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteeemail(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteemobilecountrycode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupcountrycode(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupname(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAboutthegroup(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryname(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrouptype(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategoryname(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategoryid(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvitebyname(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupstatus(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalgroupmembers(value);
      break;
    case 36:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupdescription(value);
      break;
    case 37:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifiedstatus(value);
      break;
    case 38:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupiconurl(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.InviteResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.InviteResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.InviteResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.InviteResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInviteemobileno();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInviteeemail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInviteemobilecountrycode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGroupcountrycode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getGroupname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAboutthegroup();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCountryname();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getGrouptype();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getCategoryname();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getCategoryid();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getInvitebyname();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getGroupstatus();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getTotalgroupmembers();
  if (f !== 0) {
    writer.writeInt32(
      35,
      f
    );
  }
  f = message.getGroupdescription();
  if (f.length > 0) {
    writer.writeString(
      36,
      f
    );
  }
  f = message.getVerifiedstatus();
  if (f.length > 0) {
    writer.writeString(
      37,
      f
    );
  }
  f = message.getGroupiconurl();
  if (f.length > 0) {
    writer.writeString(
      38,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
};


/**
 * optional string inviteeMobileNo = 1;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getInviteemobileno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setInviteemobileno = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string inviteeEmail = 2;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getInviteeemail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setInviteeemail = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string inviteeMobileCountryCode = 3;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getInviteemobilecountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setInviteemobilecountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string groupId = 5;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string groupCountryCode = 6;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getGroupcountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setGroupcountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string groupName = 7;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getGroupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setGroupname = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string aboutTheGroup = 8;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getAboutthegroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setAboutthegroup = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string countryName = 9;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getCountryname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setCountryname = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string groupType = 11;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getGrouptype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setGrouptype = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string categoryName = 12;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getCategoryname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setCategoryname = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string categoryId = 13;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getCategoryid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setCategoryid = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string inviteByName = 14;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getInvitebyname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setInvitebyname = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string groupStatus = 30;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getGroupstatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setGroupstatus = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional int32 totalGroupMembers = 35;
 * @return {number}
 */
proto.GroupCon.InviteResponseMessage.prototype.getTotalgroupmembers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 35, 0));
};


/**
 * @param {number} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setTotalgroupmembers = function(value) {
  return jspb.Message.setProto3IntField(this, 35, value);
};


/**
 * optional string groupDescription = 36;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getGroupdescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 36, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setGroupdescription = function(value) {
  return jspb.Message.setProto3StringField(this, 36, value);
};


/**
 * optional string verifiedStatus = 37;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getVerifiedstatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 37, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setVerifiedstatus = function(value) {
  return jspb.Message.setProto3StringField(this, 37, value);
};


/**
 * optional string groupIconUrl = 38;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getGroupiconurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 38, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setGroupiconurl = function(value) {
  return jspb.Message.setProto3StringField(this, 38, value);
};


/**
 * optional string languageId = 50;
 * @return {string}
 */
proto.GroupCon.InviteResponseMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.InviteResponseMessage} returns this
 */
proto.GroupCon.InviteResponseMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 50, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GroupCon.InviteListResponseMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.InviteListResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.InviteListResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.InviteListResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.InviteListResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    invitelistList: jspb.Message.toObjectList(msg.getInvitelistList(),
    proto.GroupCon.InviteResponseMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.InviteListResponseMessage}
 */
proto.GroupCon.InviteListResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.InviteListResponseMessage;
  return proto.GroupCon.InviteListResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.InviteListResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.InviteListResponseMessage}
 */
proto.GroupCon.InviteListResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GroupCon.InviteResponseMessage;
      reader.readMessage(value,proto.GroupCon.InviteResponseMessage.deserializeBinaryFromReader);
      msg.addInvitelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.InviteListResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.InviteListResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.InviteListResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.InviteListResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvitelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GroupCon.InviteResponseMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InviteResponseMessage inviteList = 1;
 * @return {!Array<!proto.GroupCon.InviteResponseMessage>}
 */
proto.GroupCon.InviteListResponseMessage.prototype.getInvitelistList = function() {
  return /** @type{!Array<!proto.GroupCon.InviteResponseMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GroupCon.InviteResponseMessage, 1));
};


/**
 * @param {!Array<!proto.GroupCon.InviteResponseMessage>} value
 * @return {!proto.GroupCon.InviteListResponseMessage} returns this
*/
proto.GroupCon.InviteListResponseMessage.prototype.setInvitelistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GroupCon.InviteResponseMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GroupCon.InviteResponseMessage}
 */
proto.GroupCon.InviteListResponseMessage.prototype.addInvitelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GroupCon.InviteResponseMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GroupCon.InviteListResponseMessage} returns this
 */
proto.GroupCon.InviteListResponseMessage.prototype.clearInvitelistList = function() {
  return this.setInvitelistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.AcceptInviteRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.AcceptInviteRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.AcceptInviteRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.AcceptInviteRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    inviteid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inviteemobileno: jspb.Message.getFieldWithDefault(msg, 2, ""),
    inviteeemail: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inviteemobilecountrycode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    groupid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    groupcountrycode: jspb.Message.getFieldWithDefault(msg, 6, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 51, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.AcceptInviteRequestMessage}
 */
proto.GroupCon.AcceptInviteRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.AcceptInviteRequestMessage;
  return proto.GroupCon.AcceptInviteRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.AcceptInviteRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.AcceptInviteRequestMessage}
 */
proto.GroupCon.AcceptInviteRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteemobileno(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteeemail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteemobilecountrycode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupcountrycode(value);
      break;
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.AcceptInviteRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.AcceptInviteRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.AcceptInviteRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.AcceptInviteRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInviteid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInviteemobileno();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInviteeemail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInviteemobilecountrycode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGroupcountrycode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
};


/**
 * optional string inviteId = 1;
 * @return {string}
 */
proto.GroupCon.AcceptInviteRequestMessage.prototype.getInviteid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.AcceptInviteRequestMessage} returns this
 */
proto.GroupCon.AcceptInviteRequestMessage.prototype.setInviteid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string inviteeMobileNo = 2;
 * @return {string}
 */
proto.GroupCon.AcceptInviteRequestMessage.prototype.getInviteemobileno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.AcceptInviteRequestMessage} returns this
 */
proto.GroupCon.AcceptInviteRequestMessage.prototype.setInviteemobileno = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string inviteeEmail = 3;
 * @return {string}
 */
proto.GroupCon.AcceptInviteRequestMessage.prototype.getInviteeemail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.AcceptInviteRequestMessage} returns this
 */
proto.GroupCon.AcceptInviteRequestMessage.prototype.setInviteeemail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string inviteeMobileCountryCode = 4;
 * @return {string}
 */
proto.GroupCon.AcceptInviteRequestMessage.prototype.getInviteemobilecountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.AcceptInviteRequestMessage} returns this
 */
proto.GroupCon.AcceptInviteRequestMessage.prototype.setInviteemobilecountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string groupId = 5;
 * @return {string}
 */
proto.GroupCon.AcceptInviteRequestMessage.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.AcceptInviteRequestMessage} returns this
 */
proto.GroupCon.AcceptInviteRequestMessage.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string groupCountryCode = 6;
 * @return {string}
 */
proto.GroupCon.AcceptInviteRequestMessage.prototype.getGroupcountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.AcceptInviteRequestMessage} returns this
 */
proto.GroupCon.AcceptInviteRequestMessage.prototype.setGroupcountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string languageId = 51;
 * @return {string}
 */
proto.GroupCon.AcceptInviteRequestMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.AcceptInviteRequestMessage} returns this
 */
proto.GroupCon.AcceptInviteRequestMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 51, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.RejectInviteRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.RejectInviteRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.RejectInviteRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.RejectInviteRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    inviteid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    groupcountrycode: jspb.Message.getFieldWithDefault(msg, 6, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 51, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.RejectInviteRequestMessage}
 */
proto.GroupCon.RejectInviteRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.RejectInviteRequestMessage;
  return proto.GroupCon.RejectInviteRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.RejectInviteRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.RejectInviteRequestMessage}
 */
proto.GroupCon.RejectInviteRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupcountrycode(value);
      break;
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.RejectInviteRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.RejectInviteRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.RejectInviteRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.RejectInviteRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInviteid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroupcountrycode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
};


/**
 * optional string inviteId = 1;
 * @return {string}
 */
proto.GroupCon.RejectInviteRequestMessage.prototype.getInviteid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.RejectInviteRequestMessage} returns this
 */
proto.GroupCon.RejectInviteRequestMessage.prototype.setInviteid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string groupCountryCode = 6;
 * @return {string}
 */
proto.GroupCon.RejectInviteRequestMessage.prototype.getGroupcountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.RejectInviteRequestMessage} returns this
 */
proto.GroupCon.RejectInviteRequestMessage.prototype.setGroupcountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string languageId = 51;
 * @return {string}
 */
proto.GroupCon.RejectInviteRequestMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.RejectInviteRequestMessage} returns this
 */
proto.GroupCon.RejectInviteRequestMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 51, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.GroupMembersRequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.GroupMembersRequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.GroupMembersRequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.GroupMembersRequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    inviteid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    groupcountrycode: jspb.Message.getFieldWithDefault(msg, 6, ""),
    languageid: jspb.Message.getFieldWithDefault(msg, 51, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.GroupMembersRequestMessage}
 */
proto.GroupCon.GroupMembersRequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.GroupMembersRequestMessage;
  return proto.GroupCon.GroupMembersRequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.GroupMembersRequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.GroupMembersRequestMessage}
 */
proto.GroupCon.GroupMembersRequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInviteid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupcountrycode(value);
      break;
    case 51:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.GroupMembersRequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.GroupMembersRequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.GroupMembersRequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.GroupMembersRequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInviteid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroupcountrycode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLanguageid();
  if (f.length > 0) {
    writer.writeString(
      51,
      f
    );
  }
};


/**
 * optional string inviteId = 1;
 * @return {string}
 */
proto.GroupCon.GroupMembersRequestMessage.prototype.getInviteid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupMembersRequestMessage} returns this
 */
proto.GroupCon.GroupMembersRequestMessage.prototype.setInviteid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string groupCountryCode = 6;
 * @return {string}
 */
proto.GroupCon.GroupMembersRequestMessage.prototype.getGroupcountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupMembersRequestMessage} returns this
 */
proto.GroupCon.GroupMembersRequestMessage.prototype.setGroupcountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string languageId = 51;
 * @return {string}
 */
proto.GroupCon.GroupMembersRequestMessage.prototype.getLanguageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupMembersRequestMessage} returns this
 */
proto.GroupCon.GroupMembersRequestMessage.prototype.setLanguageid = function(value) {
  return jspb.Message.setProto3StringField(this, 51, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.GroupMembersResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.GroupMembersResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.GroupMembersResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    membername: jspb.Message.getFieldWithDefault(msg, 2, ""),
    groupid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    groupcountrycode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    grouptype: jspb.Message.getFieldWithDefault(msg, 13, ""),
    memberstatus: jspb.Message.getFieldWithDefault(msg, 14, ""),
    adminormember: jspb.Message.getFieldWithDefault(msg, 15, ""),
    customerprofilepicimageurl: jspb.Message.getFieldWithDefault(msg, 17, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.GroupMembersResponseMessage}
 */
proto.GroupCon.GroupMembersResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.GroupMembersResponseMessage;
  return proto.GroupCon.GroupMembersResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.GroupMembersResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.GroupMembersResponseMessage}
 */
proto.GroupCon.GroupMembersResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemberid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMembername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupcountrycode(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrouptype(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemberstatus(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdminormember(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerprofilepicimageurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.GroupMembersResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.GroupMembersResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.GroupMembersResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMembername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroupid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGroupcountrycode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGrouptype();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getMemberstatus();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getAdminormember();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getCustomerprofilepicimageurl();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional string MemberId = 1;
 * @return {string}
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.getMemberid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupMembersResponseMessage} returns this
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.setMemberid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string MemberName = 2;
 * @return {string}
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.getMembername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupMembersResponseMessage} returns this
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.setMembername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string GroupId = 3;
 * @return {string}
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupMembersResponseMessage} returns this
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string GroupCountryCode = 4;
 * @return {string}
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.getGroupcountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupMembersResponseMessage} returns this
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.setGroupcountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string GroupType = 13;
 * @return {string}
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.getGrouptype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupMembersResponseMessage} returns this
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.setGrouptype = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string MemberStatus = 14;
 * @return {string}
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.getMemberstatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupMembersResponseMessage} returns this
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.setMemberstatus = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string AdminOrMember = 15;
 * @return {string}
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.getAdminormember = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupMembersResponseMessage} returns this
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.setAdminormember = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string CustomerProfilePicImageUrl = 17;
 * @return {string}
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.getCustomerprofilepicimageurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.GroupCon.GroupMembersResponseMessage} returns this
 */
proto.GroupCon.GroupMembersResponseMessage.prototype.setCustomerprofilepicimageurl = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GroupCon.GroupMembersListResponseMessage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GroupCon.GroupMembersListResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.GroupCon.GroupMembersListResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GroupCon.GroupMembersListResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.GroupMembersListResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    grouplistList: jspb.Message.toObjectList(msg.getGrouplistList(),
    proto.GroupCon.GroupMembersResponseMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GroupCon.GroupMembersListResponseMessage}
 */
proto.GroupCon.GroupMembersListResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GroupCon.GroupMembersListResponseMessage;
  return proto.GroupCon.GroupMembersListResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GroupCon.GroupMembersListResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GroupCon.GroupMembersListResponseMessage}
 */
proto.GroupCon.GroupMembersListResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GroupCon.GroupMembersResponseMessage;
      reader.readMessage(value,proto.GroupCon.GroupMembersResponseMessage.deserializeBinaryFromReader);
      msg.addGrouplist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GroupCon.GroupMembersListResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GroupCon.GroupMembersListResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GroupCon.GroupMembersListResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GroupCon.GroupMembersListResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrouplistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GroupCon.GroupMembersResponseMessage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GroupMembersResponseMessage groupList = 1;
 * @return {!Array<!proto.GroupCon.GroupMembersResponseMessage>}
 */
proto.GroupCon.GroupMembersListResponseMessage.prototype.getGrouplistList = function() {
  return /** @type{!Array<!proto.GroupCon.GroupMembersResponseMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GroupCon.GroupMembersResponseMessage, 1));
};


/**
 * @param {!Array<!proto.GroupCon.GroupMembersResponseMessage>} value
 * @return {!proto.GroupCon.GroupMembersListResponseMessage} returns this
*/
proto.GroupCon.GroupMembersListResponseMessage.prototype.setGrouplistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GroupCon.GroupMembersResponseMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GroupCon.GroupMembersResponseMessage}
 */
proto.GroupCon.GroupMembersListResponseMessage.prototype.addGrouplist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GroupCon.GroupMembersResponseMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GroupCon.GroupMembersListResponseMessage} returns this
 */
proto.GroupCon.GroupMembersListResponseMessage.prototype.clearGrouplistList = function() {
  return this.setGrouplistList([]);
};


goog.object.extend(exports, proto.GroupCon);
