/**
 * @fileoverview gRPC-Web generated client stub for eganow.api.payment
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.25.1
// source: eganow/api/payment/payment_service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as eganow_api_payment_payment_payload_pb from '../../../eganow/api/payment/payment_payload_pb';
import * as eganow_api_payment_common_pb from '../../../eganow/api/payment/common_pb';


export class EgaPayDeveloperApiSvcClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetAccessToken = new grpcWeb.MethodDescriptor(
    '/eganow.api.payment.EgaPayDeveloperApiSvc/GetAccessToken',
    grpcWeb.MethodType.UNARY,
    eganow_api_payment_common_pb.EgaPayEmpty,
    eganow_api_payment_payment_payload_pb.AccessTokenResponse,
    (request: eganow_api_payment_common_pb.EgaPayEmpty) => {
      return request.serializeBinary();
    },
    eganow_api_payment_payment_payload_pb.AccessTokenResponse.deserializeBinary
  );

  getAccessToken(
    request: eganow_api_payment_common_pb.EgaPayEmpty,
    metadata: grpcWeb.Metadata | null): Promise<eganow_api_payment_payment_payload_pb.AccessTokenResponse>;

  getAccessToken(
    request: eganow_api_payment_common_pb.EgaPayEmpty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: eganow_api_payment_payment_payload_pb.AccessTokenResponse) => void): grpcWeb.ClientReadableStream<eganow_api_payment_payment_payload_pb.AccessTokenResponse>;

  getAccessToken(
    request: eganow_api_payment_common_pb.EgaPayEmpty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: eganow_api_payment_payment_payload_pb.AccessTokenResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/eganow.api.payment.EgaPayDeveloperApiSvc/GetAccessToken',
        request,
        metadata || {},
        this.methodDescriptorGetAccessToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/eganow.api.payment.EgaPayDeveloperApiSvc/GetAccessToken',
    request,
    metadata || {},
    this.methodDescriptorGetAccessToken);
  }

  methodDescriptorGetAccountHolderInfo = new grpcWeb.MethodDescriptor(
    '/eganow.api.payment.EgaPayDeveloperApiSvc/GetAccountHolderInfo',
    grpcWeb.MethodType.UNARY,
    eganow_api_payment_payment_payload_pb.GetAccountInfoRequest,
    eganow_api_payment_payment_payload_pb.GetAccountInfoResponse,
    (request: eganow_api_payment_payment_payload_pb.GetAccountInfoRequest) => {
      return request.serializeBinary();
    },
    eganow_api_payment_payment_payload_pb.GetAccountInfoResponse.deserializeBinary
  );

  getAccountHolderInfo(
    request: eganow_api_payment_payment_payload_pb.GetAccountInfoRequest,
    metadata: grpcWeb.Metadata | null): Promise<eganow_api_payment_payment_payload_pb.GetAccountInfoResponse>;

  getAccountHolderInfo(
    request: eganow_api_payment_payment_payload_pb.GetAccountInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: eganow_api_payment_payment_payload_pb.GetAccountInfoResponse) => void): grpcWeb.ClientReadableStream<eganow_api_payment_payment_payload_pb.GetAccountInfoResponse>;

  getAccountHolderInfo(
    request: eganow_api_payment_payment_payload_pb.GetAccountInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: eganow_api_payment_payment_payload_pb.GetAccountInfoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/eganow.api.payment.EgaPayDeveloperApiSvc/GetAccountHolderInfo',
        request,
        metadata || {},
        this.methodDescriptorGetAccountHolderInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/eganow.api.payment.EgaPayDeveloperApiSvc/GetAccountHolderInfo',
    request,
    metadata || {},
    this.methodDescriptorGetAccountHolderInfo);
  }

  methodDescriptorGetCollectionServiceList = new grpcWeb.MethodDescriptor(
    '/eganow.api.payment.EgaPayDeveloperApiSvc/GetCollectionServiceList',
    grpcWeb.MethodType.UNARY,
    eganow_api_payment_payment_payload_pb.GetServiceListRequest,
    eganow_api_payment_payment_payload_pb.GetServiceListResponse,
    (request: eganow_api_payment_payment_payload_pb.GetServiceListRequest) => {
      return request.serializeBinary();
    },
    eganow_api_payment_payment_payload_pb.GetServiceListResponse.deserializeBinary
  );

  getCollectionServiceList(
    request: eganow_api_payment_payment_payload_pb.GetServiceListRequest,
    metadata: grpcWeb.Metadata | null): Promise<eganow_api_payment_payment_payload_pb.GetServiceListResponse>;

  getCollectionServiceList(
    request: eganow_api_payment_payment_payload_pb.GetServiceListRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: eganow_api_payment_payment_payload_pb.GetServiceListResponse) => void): grpcWeb.ClientReadableStream<eganow_api_payment_payment_payload_pb.GetServiceListResponse>;

  getCollectionServiceList(
    request: eganow_api_payment_payment_payload_pb.GetServiceListRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: eganow_api_payment_payment_payload_pb.GetServiceListResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/eganow.api.payment.EgaPayDeveloperApiSvc/GetCollectionServiceList',
        request,
        metadata || {},
        this.methodDescriptorGetCollectionServiceList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/eganow.api.payment.EgaPayDeveloperApiSvc/GetCollectionServiceList',
    request,
    metadata || {},
    this.methodDescriptorGetCollectionServiceList);
  }

  methodDescriptorGetPayoutServiceList = new grpcWeb.MethodDescriptor(
    '/eganow.api.payment.EgaPayDeveloperApiSvc/GetPayoutServiceList',
    grpcWeb.MethodType.UNARY,
    eganow_api_payment_payment_payload_pb.GetServiceListRequest,
    eganow_api_payment_payment_payload_pb.GetServiceListResponse,
    (request: eganow_api_payment_payment_payload_pb.GetServiceListRequest) => {
      return request.serializeBinary();
    },
    eganow_api_payment_payment_payload_pb.GetServiceListResponse.deserializeBinary
  );

  getPayoutServiceList(
    request: eganow_api_payment_payment_payload_pb.GetServiceListRequest,
    metadata: grpcWeb.Metadata | null): Promise<eganow_api_payment_payment_payload_pb.GetServiceListResponse>;

  getPayoutServiceList(
    request: eganow_api_payment_payment_payload_pb.GetServiceListRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: eganow_api_payment_payment_payload_pb.GetServiceListResponse) => void): grpcWeb.ClientReadableStream<eganow_api_payment_payment_payload_pb.GetServiceListResponse>;

  getPayoutServiceList(
    request: eganow_api_payment_payment_payload_pb.GetServiceListRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: eganow_api_payment_payment_payload_pb.GetServiceListResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/eganow.api.payment.EgaPayDeveloperApiSvc/GetPayoutServiceList',
        request,
        metadata || {},
        this.methodDescriptorGetPayoutServiceList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/eganow.api.payment.EgaPayDeveloperApiSvc/GetPayoutServiceList',
    request,
    metadata || {},
    this.methodDescriptorGetPayoutServiceList);
  }

  methodDescriptorPayoutCreditAccount = new grpcWeb.MethodDescriptor(
    '/eganow.api.payment.EgaPayDeveloperApiSvc/PayoutCreditAccount',
    grpcWeb.MethodType.UNARY,
    eganow_api_payment_payment_payload_pb.TransferRequest,
    eganow_api_payment_payment_payload_pb.TransferResponse,
    (request: eganow_api_payment_payment_payload_pb.TransferRequest) => {
      return request.serializeBinary();
    },
    eganow_api_payment_payment_payload_pb.TransferResponse.deserializeBinary
  );

  payoutCreditAccount(
    request: eganow_api_payment_payment_payload_pb.TransferRequest,
    metadata: grpcWeb.Metadata | null): Promise<eganow_api_payment_payment_payload_pb.TransferResponse>;

  payoutCreditAccount(
    request: eganow_api_payment_payment_payload_pb.TransferRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: eganow_api_payment_payment_payload_pb.TransferResponse) => void): grpcWeb.ClientReadableStream<eganow_api_payment_payment_payload_pb.TransferResponse>;

  payoutCreditAccount(
    request: eganow_api_payment_payment_payload_pb.TransferRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: eganow_api_payment_payment_payload_pb.TransferResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/eganow.api.payment.EgaPayDeveloperApiSvc/PayoutCreditAccount',
        request,
        metadata || {},
        this.methodDescriptorPayoutCreditAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/eganow.api.payment.EgaPayDeveloperApiSvc/PayoutCreditAccount',
    request,
    metadata || {},
    this.methodDescriptorPayoutCreditAccount);
  }

  methodDescriptorCollectionDebitAccount = new grpcWeb.MethodDescriptor(
    '/eganow.api.payment.EgaPayDeveloperApiSvc/CollectionDebitAccount',
    grpcWeb.MethodType.UNARY,
    eganow_api_payment_payment_payload_pb.TransferRequest,
    eganow_api_payment_payment_payload_pb.TransferResponse,
    (request: eganow_api_payment_payment_payload_pb.TransferRequest) => {
      return request.serializeBinary();
    },
    eganow_api_payment_payment_payload_pb.TransferResponse.deserializeBinary
  );

  collectionDebitAccount(
    request: eganow_api_payment_payment_payload_pb.TransferRequest,
    metadata: grpcWeb.Metadata | null): Promise<eganow_api_payment_payment_payload_pb.TransferResponse>;

  collectionDebitAccount(
    request: eganow_api_payment_payment_payload_pb.TransferRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: eganow_api_payment_payment_payload_pb.TransferResponse) => void): grpcWeb.ClientReadableStream<eganow_api_payment_payment_payload_pb.TransferResponse>;

  collectionDebitAccount(
    request: eganow_api_payment_payment_payload_pb.TransferRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: eganow_api_payment_payment_payload_pb.TransferResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/eganow.api.payment.EgaPayDeveloperApiSvc/CollectionDebitAccount',
        request,
        metadata || {},
        this.methodDescriptorCollectionDebitAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/eganow.api.payment.EgaPayDeveloperApiSvc/CollectionDebitAccount',
    request,
    metadata || {},
    this.methodDescriptorCollectionDebitAccount);
  }

  methodDescriptorTransactionStatusQuery = new grpcWeb.MethodDescriptor(
    '/eganow.api.payment.EgaPayDeveloperApiSvc/TransactionStatusQuery',
    grpcWeb.MethodType.UNARY,
    eganow_api_payment_payment_payload_pb.QueryTransferStatusRequest,
    eganow_api_payment_payment_payload_pb.QueryTransferStatusTransferResponse,
    (request: eganow_api_payment_payment_payload_pb.QueryTransferStatusRequest) => {
      return request.serializeBinary();
    },
    eganow_api_payment_payment_payload_pb.QueryTransferStatusTransferResponse.deserializeBinary
  );

  transactionStatusQuery(
    request: eganow_api_payment_payment_payload_pb.QueryTransferStatusRequest,
    metadata: grpcWeb.Metadata | null): Promise<eganow_api_payment_payment_payload_pb.QueryTransferStatusTransferResponse>;

  transactionStatusQuery(
    request: eganow_api_payment_payment_payload_pb.QueryTransferStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: eganow_api_payment_payment_payload_pb.QueryTransferStatusTransferResponse) => void): grpcWeb.ClientReadableStream<eganow_api_payment_payment_payload_pb.QueryTransferStatusTransferResponse>;

  transactionStatusQuery(
    request: eganow_api_payment_payment_payload_pb.QueryTransferStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: eganow_api_payment_payment_payload_pb.QueryTransferStatusTransferResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/eganow.api.payment.EgaPayDeveloperApiSvc/TransactionStatusQuery',
        request,
        metadata || {},
        this.methodDescriptorTransactionStatusQuery,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/eganow.api.payment.EgaPayDeveloperApiSvc/TransactionStatusQuery',
    request,
    metadata || {},
    this.methodDescriptorTransactionStatusQuery);
  }

}

