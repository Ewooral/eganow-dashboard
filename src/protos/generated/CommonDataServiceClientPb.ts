/**
 * @fileoverview gRPC-Web generated client stub for Commondata
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.25.0-rc2
// source: CommonData.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as CommonData_pb from './CommonData_pb'


export class CommonDataSvcClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetReceivingOperatingCountries = new grpcWeb.MethodDescriptor(
    '/Commondata.CommonDataSvc/GetReceivingOperatingCountries',
    grpcWeb.MethodType.UNARY,
    CommonData_pb.EmptyCommonDataMessage,
    CommonData_pb.CountryListResponseMessage,
    (request: CommonData_pb.EmptyCommonDataMessage) => {
      return request.serializeBinary();
    },
    CommonData_pb.CountryListResponseMessage.deserializeBinary
  );

  getReceivingOperatingCountries(
    request: CommonData_pb.EmptyCommonDataMessage,
    metadata: grpcWeb.Metadata | null): Promise<CommonData_pb.CountryListResponseMessage>;

  getReceivingOperatingCountries(
    request: CommonData_pb.EmptyCommonDataMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: CommonData_pb.CountryListResponseMessage) => void): grpcWeb.ClientReadableStream<CommonData_pb.CountryListResponseMessage>;

  getReceivingOperatingCountries(
    request: CommonData_pb.EmptyCommonDataMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: CommonData_pb.CountryListResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Commondata.CommonDataSvc/GetReceivingOperatingCountries',
        request,
        metadata || {},
        this.methodDescriptorGetReceivingOperatingCountries,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Commondata.CommonDataSvc/GetReceivingOperatingCountries',
    request,
    metadata || {},
    this.methodDescriptorGetReceivingOperatingCountries);
  }

  methodDescriptorGetSenderAllCountries = new grpcWeb.MethodDescriptor(
    '/Commondata.CommonDataSvc/GetSenderAllCountries',
    grpcWeb.MethodType.UNARY,
    CommonData_pb.EmptyCommonDataMessage,
    CommonData_pb.CountryListResponseMessage,
    (request: CommonData_pb.EmptyCommonDataMessage) => {
      return request.serializeBinary();
    },
    CommonData_pb.CountryListResponseMessage.deserializeBinary
  );

  getSenderAllCountries(
    request: CommonData_pb.EmptyCommonDataMessage,
    metadata: grpcWeb.Metadata | null): Promise<CommonData_pb.CountryListResponseMessage>;

  getSenderAllCountries(
    request: CommonData_pb.EmptyCommonDataMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: CommonData_pb.CountryListResponseMessage) => void): grpcWeb.ClientReadableStream<CommonData_pb.CountryListResponseMessage>;

  getSenderAllCountries(
    request: CommonData_pb.EmptyCommonDataMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: CommonData_pb.CountryListResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Commondata.CommonDataSvc/GetSenderAllCountries',
        request,
        metadata || {},
        this.methodDescriptorGetSenderAllCountries,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Commondata.CommonDataSvc/GetSenderAllCountries',
    request,
    metadata || {},
    this.methodDescriptorGetSenderAllCountries);
  }

  methodDescriptorGetPaymentTypeForSourceAccountsForSelectedCountry = new grpcWeb.MethodDescriptor(
    '/Commondata.CommonDataSvc/GetPaymentTypeForSourceAccountsForSelectedCountry',
    grpcWeb.MethodType.UNARY,
    CommonData_pb.CountryRequestMessage,
    CommonData_pb.PaymentAcctTypesAndServicesListResponseMessage,
    (request: CommonData_pb.CountryRequestMessage) => {
      return request.serializeBinary();
    },
    CommonData_pb.PaymentAcctTypesAndServicesListResponseMessage.deserializeBinary
  );

  getPaymentTypeForSourceAccountsForSelectedCountry(
    request: CommonData_pb.CountryRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<CommonData_pb.PaymentAcctTypesAndServicesListResponseMessage>;

  getPaymentTypeForSourceAccountsForSelectedCountry(
    request: CommonData_pb.CountryRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: CommonData_pb.PaymentAcctTypesAndServicesListResponseMessage) => void): grpcWeb.ClientReadableStream<CommonData_pb.PaymentAcctTypesAndServicesListResponseMessage>;

  getPaymentTypeForSourceAccountsForSelectedCountry(
    request: CommonData_pb.CountryRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: CommonData_pb.PaymentAcctTypesAndServicesListResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Commondata.CommonDataSvc/GetPaymentTypeForSourceAccountsForSelectedCountry',
        request,
        metadata || {},
        this.methodDescriptorGetPaymentTypeForSourceAccountsForSelectedCountry,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Commondata.CommonDataSvc/GetPaymentTypeForSourceAccountsForSelectedCountry',
    request,
    metadata || {},
    this.methodDescriptorGetPaymentTypeForSourceAccountsForSelectedCountry);
  }

  methodDescriptorGetPaymentTypeForBeneficiaryAccountsForSelectedCountry = new grpcWeb.MethodDescriptor(
    '/Commondata.CommonDataSvc/GetPaymentTypeForBeneficiaryAccountsForSelectedCountry',
    grpcWeb.MethodType.UNARY,
    CommonData_pb.CountryRequestMessage,
    CommonData_pb.PaymentAcctTypesAndServicesListResponseMessage,
    (request: CommonData_pb.CountryRequestMessage) => {
      return request.serializeBinary();
    },
    CommonData_pb.PaymentAcctTypesAndServicesListResponseMessage.deserializeBinary
  );

  getPaymentTypeForBeneficiaryAccountsForSelectedCountry(
    request: CommonData_pb.CountryRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<CommonData_pb.PaymentAcctTypesAndServicesListResponseMessage>;

  getPaymentTypeForBeneficiaryAccountsForSelectedCountry(
    request: CommonData_pb.CountryRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: CommonData_pb.PaymentAcctTypesAndServicesListResponseMessage) => void): grpcWeb.ClientReadableStream<CommonData_pb.PaymentAcctTypesAndServicesListResponseMessage>;

  getPaymentTypeForBeneficiaryAccountsForSelectedCountry(
    request: CommonData_pb.CountryRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: CommonData_pb.PaymentAcctTypesAndServicesListResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Commondata.CommonDataSvc/GetPaymentTypeForBeneficiaryAccountsForSelectedCountry',
        request,
        metadata || {},
        this.methodDescriptorGetPaymentTypeForBeneficiaryAccountsForSelectedCountry,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Commondata.CommonDataSvc/GetPaymentTypeForBeneficiaryAccountsForSelectedCountry',
    request,
    metadata || {},
    this.methodDescriptorGetPaymentTypeForBeneficiaryAccountsForSelectedCountry);
  }

  methodDescriptorGetCurrenciesForSendingAmount = new grpcWeb.MethodDescriptor(
    '/Commondata.CommonDataSvc/GetCurrenciesForSendingAmount',
    grpcWeb.MethodType.UNARY,
    CommonData_pb.SendingAmountRequestMessage,
    CommonData_pb.CurrenciesListRequestMessage,
    (request: CommonData_pb.SendingAmountRequestMessage) => {
      return request.serializeBinary();
    },
    CommonData_pb.CurrenciesListRequestMessage.deserializeBinary
  );

  getCurrenciesForSendingAmount(
    request: CommonData_pb.SendingAmountRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<CommonData_pb.CurrenciesListRequestMessage>;

  getCurrenciesForSendingAmount(
    request: CommonData_pb.SendingAmountRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: CommonData_pb.CurrenciesListRequestMessage) => void): grpcWeb.ClientReadableStream<CommonData_pb.CurrenciesListRequestMessage>;

  getCurrenciesForSendingAmount(
    request: CommonData_pb.SendingAmountRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: CommonData_pb.CurrenciesListRequestMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Commondata.CommonDataSvc/GetCurrenciesForSendingAmount',
        request,
        metadata || {},
        this.methodDescriptorGetCurrenciesForSendingAmount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Commondata.CommonDataSvc/GetCurrenciesForSendingAmount',
    request,
    metadata || {},
    this.methodDescriptorGetCurrenciesForSendingAmount);
  }

  methodDescriptorGetCurrenciesExchangeRate = new grpcWeb.MethodDescriptor(
    '/Commondata.CommonDataSvc/GetCurrenciesExchangeRate',
    grpcWeb.MethodType.UNARY,
    CommonData_pb.CurrenExchRateRequestMessage,
    CommonData_pb.CurrenExchRateRequestMessage,
    (request: CommonData_pb.CurrenExchRateRequestMessage) => {
      return request.serializeBinary();
    },
    CommonData_pb.CurrenExchRateRequestMessage.deserializeBinary
  );

  getCurrenciesExchangeRate(
    request: CommonData_pb.CurrenExchRateRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<CommonData_pb.CurrenExchRateRequestMessage>;

  getCurrenciesExchangeRate(
    request: CommonData_pb.CurrenExchRateRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: CommonData_pb.CurrenExchRateRequestMessage) => void): grpcWeb.ClientReadableStream<CommonData_pb.CurrenExchRateRequestMessage>;

  getCurrenciesExchangeRate(
    request: CommonData_pb.CurrenExchRateRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: CommonData_pb.CurrenExchRateRequestMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Commondata.CommonDataSvc/GetCurrenciesExchangeRate',
        request,
        metadata || {},
        this.methodDescriptorGetCurrenciesExchangeRate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Commondata.CommonDataSvc/GetCurrenciesExchangeRate',
    request,
    metadata || {},
    this.methodDescriptorGetCurrenciesExchangeRate);
  }

  methodDescriptorDeleteCustomerPaymentAndBeneficiaryAccount = new grpcWeb.MethodDescriptor(
    '/Commondata.CommonDataSvc/DeleteCustomerPaymentAndBeneficiaryAccount',
    grpcWeb.MethodType.UNARY,
    CommonData_pb.DeleteAccountMessage,
    CommonData_pb.SuccessCommonMessage,
    (request: CommonData_pb.DeleteAccountMessage) => {
      return request.serializeBinary();
    },
    CommonData_pb.SuccessCommonMessage.deserializeBinary
  );

  deleteCustomerPaymentAndBeneficiaryAccount(
    request: CommonData_pb.DeleteAccountMessage,
    metadata: grpcWeb.Metadata | null): Promise<CommonData_pb.SuccessCommonMessage>;

  deleteCustomerPaymentAndBeneficiaryAccount(
    request: CommonData_pb.DeleteAccountMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: CommonData_pb.SuccessCommonMessage) => void): grpcWeb.ClientReadableStream<CommonData_pb.SuccessCommonMessage>;

  deleteCustomerPaymentAndBeneficiaryAccount(
    request: CommonData_pb.DeleteAccountMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: CommonData_pb.SuccessCommonMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Commondata.CommonDataSvc/DeleteCustomerPaymentAndBeneficiaryAccount',
        request,
        metadata || {},
        this.methodDescriptorDeleteCustomerPaymentAndBeneficiaryAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Commondata.CommonDataSvc/DeleteCustomerPaymentAndBeneficiaryAccount',
    request,
    metadata || {},
    this.methodDescriptorDeleteCustomerPaymentAndBeneficiaryAccount);
  }

  methodDescriptorGenerateTransOTPNow = new grpcWeb.MethodDescriptor(
    '/Commondata.CommonDataSvc/GenerateTransOTPNow',
    grpcWeb.MethodType.UNARY,
    CommonData_pb.LanguageRequestMessage,
    CommonData_pb.SuccessCommonMessage,
    (request: CommonData_pb.LanguageRequestMessage) => {
      return request.serializeBinary();
    },
    CommonData_pb.SuccessCommonMessage.deserializeBinary
  );

  generateTransOTPNow(
    request: CommonData_pb.LanguageRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<CommonData_pb.SuccessCommonMessage>;

  generateTransOTPNow(
    request: CommonData_pb.LanguageRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: CommonData_pb.SuccessCommonMessage) => void): grpcWeb.ClientReadableStream<CommonData_pb.SuccessCommonMessage>;

  generateTransOTPNow(
    request: CommonData_pb.LanguageRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: CommonData_pb.SuccessCommonMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Commondata.CommonDataSvc/GenerateTransOTPNow',
        request,
        metadata || {},
        this.methodDescriptorGenerateTransOTPNow,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Commondata.CommonDataSvc/GenerateTransOTPNow',
    request,
    metadata || {},
    this.methodDescriptorGenerateTransOTPNow);
  }

  methodDescriptorCreateOTPForAddingSourceAccountNo = new grpcWeb.MethodDescriptor(
    '/Commondata.CommonDataSvc/CreateOTPForAddingSourceAccountNo',
    grpcWeb.MethodType.UNARY,
    CommonData_pb.OTPTransRequestMessage,
    CommonData_pb.SuccessCommonMessage,
    (request: CommonData_pb.OTPTransRequestMessage) => {
      return request.serializeBinary();
    },
    CommonData_pb.SuccessCommonMessage.deserializeBinary
  );

  createOTPForAddingSourceAccountNo(
    request: CommonData_pb.OTPTransRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<CommonData_pb.SuccessCommonMessage>;

  createOTPForAddingSourceAccountNo(
    request: CommonData_pb.OTPTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: CommonData_pb.SuccessCommonMessage) => void): grpcWeb.ClientReadableStream<CommonData_pb.SuccessCommonMessage>;

  createOTPForAddingSourceAccountNo(
    request: CommonData_pb.OTPTransRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: CommonData_pb.SuccessCommonMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Commondata.CommonDataSvc/CreateOTPForAddingSourceAccountNo',
        request,
        metadata || {},
        this.methodDescriptorCreateOTPForAddingSourceAccountNo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Commondata.CommonDataSvc/CreateOTPForAddingSourceAccountNo',
    request,
    metadata || {},
    this.methodDescriptorCreateOTPForAddingSourceAccountNo);
  }

  methodDescriptorSaveProfilePicture = new grpcWeb.MethodDescriptor(
    '/Commondata.CommonDataSvc/SaveProfilePicture',
    grpcWeb.MethodType.UNARY,
    CommonData_pb.CustProfilePicInfo,
    CommonData_pb.CustomerProfileInfoResponseMessage,
    (request: CommonData_pb.CustProfilePicInfo) => {
      return request.serializeBinary();
    },
    CommonData_pb.CustomerProfileInfoResponseMessage.deserializeBinary
  );

  saveProfilePicture(
    request: CommonData_pb.CustProfilePicInfo,
    metadata: grpcWeb.Metadata | null): Promise<CommonData_pb.CustomerProfileInfoResponseMessage>;

  saveProfilePicture(
    request: CommonData_pb.CustProfilePicInfo,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: CommonData_pb.CustomerProfileInfoResponseMessage) => void): grpcWeb.ClientReadableStream<CommonData_pb.CustomerProfileInfoResponseMessage>;

  saveProfilePicture(
    request: CommonData_pb.CustProfilePicInfo,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: CommonData_pb.CustomerProfileInfoResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Commondata.CommonDataSvc/SaveProfilePicture',
        request,
        metadata || {},
        this.methodDescriptorSaveProfilePicture,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Commondata.CommonDataSvc/SaveProfilePicture',
    request,
    metadata || {},
    this.methodDescriptorSaveProfilePicture);
  }

  methodDescriptorGetTransLimitPerCountry = new grpcWeb.MethodDescriptor(
    '/Commondata.CommonDataSvc/GetTransLimitPerCountry',
    grpcWeb.MethodType.UNARY,
    CommonData_pb.CountryRequestMessage,
    CommonData_pb.TransLimitResponseMessage,
    (request: CommonData_pb.CountryRequestMessage) => {
      return request.serializeBinary();
    },
    CommonData_pb.TransLimitResponseMessage.deserializeBinary
  );

  getTransLimitPerCountry(
    request: CommonData_pb.CountryRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<CommonData_pb.TransLimitResponseMessage>;

  getTransLimitPerCountry(
    request: CommonData_pb.CountryRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: CommonData_pb.TransLimitResponseMessage) => void): grpcWeb.ClientReadableStream<CommonData_pb.TransLimitResponseMessage>;

  getTransLimitPerCountry(
    request: CommonData_pb.CountryRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: CommonData_pb.TransLimitResponseMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Commondata.CommonDataSvc/GetTransLimitPerCountry',
        request,
        metadata || {},
        this.methodDescriptorGetTransLimitPerCountry,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Commondata.CommonDataSvc/GetTransLimitPerCountry',
    request,
    metadata || {},
    this.methodDescriptorGetTransLimitPerCountry);
  }

  methodDescriptorGetCustomerIdCardData = new grpcWeb.MethodDescriptor(
    '/Commondata.CommonDataSvc/GetCustomerIdCardData',
    grpcWeb.MethodType.UNARY,
    CommonData_pb.LanguageRequestMessage,
    CommonData_pb.IdCardDataMessage,
    (request: CommonData_pb.LanguageRequestMessage) => {
      return request.serializeBinary();
    },
    CommonData_pb.IdCardDataMessage.deserializeBinary
  );

  getCustomerIdCardData(
    request: CommonData_pb.LanguageRequestMessage,
    metadata: grpcWeb.Metadata | null): Promise<CommonData_pb.IdCardDataMessage>;

  getCustomerIdCardData(
    request: CommonData_pb.LanguageRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: CommonData_pb.IdCardDataMessage) => void): grpcWeb.ClientReadableStream<CommonData_pb.IdCardDataMessage>;

  getCustomerIdCardData(
    request: CommonData_pb.LanguageRequestMessage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: CommonData_pb.IdCardDataMessage) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Commondata.CommonDataSvc/GetCustomerIdCardData',
        request,
        metadata || {},
        this.methodDescriptorGetCustomerIdCardData,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Commondata.CommonDataSvc/GetCustomerIdCardData',
    request,
    metadata || {},
    this.methodDescriptorGetCustomerIdCardData);
  }

}

